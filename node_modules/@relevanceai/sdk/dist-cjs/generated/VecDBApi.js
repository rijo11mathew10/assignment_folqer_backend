"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VecDBApiClient = void 0;
const BaseClient_1 = require("../shared/BaseClient");
class VecDBApiClient extends BaseClient_1._GenericClient {
    constructor(config) {
        super({ ...config, service_name: 'VecDBApi' });
    }
    async CreateDeployable(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployables/create',
            options
        });
    }
    async GetDeployable(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/deployables/{deployable_id}/get',
            options
        });
    }
    async UpdateDeployable(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployables/{deployable_id}/update',
            options
        });
    }
    async DeleteDeployable(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployables/delete',
            options
        });
    }
    async CreateDeployableKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployables/{deployable_id}/share',
            options
        });
    }
    async CreateDeployableInvite(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployables/{deployable_id}/invite',
            options
        });
    }
    async UpdateUsersDeployablePermissions(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployables/{deployable_id}/users/{user_id}/update',
            options
        });
    }
    async DeleteDeployableKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployables/{deployable_id}/private',
            options
        });
    }
    async ListDeployables(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/deployables/list',
            options
        });
    }
    async DeleteDeployableGroup(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployablegroups/{deployablegroup_id}/delete',
            options
        });
    }
    async ListDeployableGroups(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployablegroups/list',
            options
        });
    }
    async CreateDeployableGroup(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployablegroups/create',
            options
        });
    }
    async GetDeployableGroup(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/deployablegroups/{deployablegroup_id}/get',
            options
        });
    }
    async UpdateDeployableGroup(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployablegroups/{deployablegroup_id}/update',
            options
        });
    }
    async CreateDeployableGroupKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployablegroups/{deployablegroup_id}/share',
            options
        });
    }
    async DeleteDeployableGroupKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployablegroups/{deployablegroup_id}/private',
            options
        });
    }
    async CreateProject(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/projects/create',
            options
        });
    }
    async UpdateProject(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/projects/update',
            options
        });
    }
    async TransferProjectToOrganization(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/projects/transfer_to_organization',
            options
        });
    }
    async ListProjects(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/projects/list',
            options
        });
    }
    async GetProjectsOrgInfo(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/projects/organization_info',
            options
        });
    }
    async ListProjectKeys(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/projects/keys/list',
            options
        });
    }
    async GetProjectKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/projects/keys/get',
            options
        });
    }
    async SetProjectKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/projects/keys/set',
            options
        });
    }
    async DeleteProjectKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/projects/keys/delete',
            options
        });
    }
    async CreateUser(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/users/create',
            options
        });
    }
    async ListUsers(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/users/list',
            options
        });
    }
    async IsUserAuthorized(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/is_authorized',
            options
        });
    }
    async GetAuthHeaderInfo(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/auth/info',
            options
        });
    }
    async CreateProjectInvite(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/invite/create',
            options
        });
    }
    async ListProjectInvites(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/invite/list',
            options
        });
    }
    async AcceptProjectInvite(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/invite/accept',
            options
        });
    }
    async DeleteProjectInvite(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/invite/delete',
            options
        });
    }
    async ResendProjectInvite(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/invite/resend',
            options
        });
    }
    async GetUser(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/auth/users/{user_id}',
            options
        });
    }
    async UpdateUser(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/users/{user_id}/update',
            options
        });
    }
    async DeleteUser(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/users/{user_id}/delete',
            options
        });
    }
    async CreateUserKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/users/{user_id}/keys/create',
            options
        });
    }
    async ListUserKeys(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/users/{user_id}/keys/list',
            options
        });
    }
    async DeleteUserKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/auth/users/{user_id}/keys/delete',
            options
        });
    }
    async InsertClusterCentroids(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/insert',
            options
        });
    }
    async UpdateClusterCentroids(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/update',
            options
        });
    }
    async CompareClusterCentroids(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/compare_centroids',
            options
        });
    }
    async Aggregate(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/aggregate',
            options
        });
    }
    async AggregateClusters(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/aggregate',
            options
        });
    }
    async ListClusterFacets(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/facets',
            options
        });
    }
    async ListClosestToCentroids(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/list_closest_to_center',
            options
        });
    }
    async ListFurthestFromCentroids(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/list_furthest_from_center',
            options
        });
    }
    async ListCentroids(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/documents',
            options
        });
    }
    async ListCentroidConfigs(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/cluster/centroids/configs/list',
            options
        });
    }
    async DeleteCentroid(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/{centroid_id}/delete',
            options
        });
    }
    async RealtimeClustering(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/realtime',
            options
        });
    }
    async MergeClusters(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/merge',
            options
        });
    }
    async CreateClusterSummaries(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/summaries/create',
            options
        });
    }
    async CreateClusterLabels(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/labels/create',
            options
        });
    }
    async ListClusterSummaries(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/summaries/list',
            options
        });
    }
    async CreateHierarchicalClusters(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/hierarchical/create',
            options
        });
    }
    async DeleteClusterSummaries(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/centroids/summaries/bulk_delete',
            options
        });
    }
    async EditOneToManyClusters(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/cluster/one_to_many/edit',
            options
        });
    }
    async EditListInDocuments(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/edit_list',
            options
        });
    }
    async CreateOrganization(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/organizations/create',
            options
        });
    }
    async UpdateOrganization(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/organizations/{organization_id}/update',
            options
        });
    }
    async UpdateOrganizationAdmin(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/admin/organizations/{organization_id}/update',
            options
        });
    }
    async ListOrganizations(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/organizations/list',
            options
        });
    }
    async DeleteOrganization(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/organizations/{organization_id}/delete',
            options
        });
    }
    async GetOrganization(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/organizations/{organization_id}/get',
            options
        });
    }
    async GetOrganizationUsage(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/organizations/{organization_id}/usage/get',
            options
        });
    }
    async ListUsersInOrganization(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/organizations/{organization_id}/users/list',
            options
        });
    }
    async ListProjectsInOrganization(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/organizations/{organization_id}/projects/list',
            options
        });
    }
    async AggregateOrganizationMetrics(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/organizations/{organization_id}/metrics/aggregate',
            options
        });
    }
    async ListBillingEvents(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/organizations/{organization_id}/billing/events/list',
            options
        });
    }
    async CreateBillingEventAdmin(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/admin/organizations/{organization_id}/billing/events/create',
            options
        });
    }
    async GetBillingFrontendLink(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/organizations/{organization_id}/billing/get_billing_frontend_link',
            options
        });
    }
    async UpdateOrganizationBilling(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/organizations/{organization_id}/billing/update',
            options
        });
    }
    async CreateConnector(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/connectors/create',
            options
        });
    }
    async CheckConnection(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/connectors/check_connection',
            options
        });
    }
    async GetConnector(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/connectors/{connector_id}/get',
            options
        });
    }
    async UpdateConnector(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/connectors/{connector_id}/update',
            options
        });
    }
    async TriggerConnector(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/connectors/{connector_id}/trigger',
            options
        });
    }
    async DeleteConnector(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/connectors/{connector_id}/delete',
            options
        });
    }
    async ListConnectors(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/connectors/list',
            options
        });
    }
    async ListConnectorTypes(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/connectors/types/list',
            options
        });
    }
    async GetConnectorType(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/connectors/types/{connector_id}/get',
            options
        });
    }
    async ListConnectorJobs(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/connectors/{connector_id}/jobs/list',
            options
        });
    }
    async GetConnectorJob(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/connectors/{connector_id}/jobs/{job_id}/get',
            options
        });
    }
    async TriggerWorkflow(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/trigger',
            options
        });
    }
    async ListWorkflows(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/workflows/list',
            options
        });
    }
    async GetWorkflowStatus(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/{workflow_id}/get',
            options
        });
    }
    async GetWorkflowConfig(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/{workflow_id}/config',
            options
        });
    }
    async DeleteWorkflowStatus(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/{workflow_id}/delete',
            options
        });
    }
    async TerminateWorkflow(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/{workflow_id}/terminate',
            options
        });
    }
    async UpsertWorkflowMetadata(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/{workflow_id}/metadata',
            options
        });
    }
    async UpsertWorkflowProgress(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/{workflow_id}/progress',
            options
        });
    }
    async UpsertWorkflowStatus(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/{workflow_id}/status',
            options
        });
    }
    async ListWorkflowTypes(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/workflows/types/list',
            options
        });
    }
    async SearchWorkflowTypes(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/types/search',
            options
        });
    }
    async GetWorkflowTypesAsOpenAPI(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/workflows/types/openapi',
            options
        });
    }
    async AggregateWorkflowTypes(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/types/aggregate',
            options
        });
    }
    async BulkUpdateWorkflowTypesAdmin(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/types/bulk_update',
            options
        });
    }
    async UpdateWorkflowTypesVersionAliasesAdmin(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/types/version_aliases/update',
            options
        });
    }
    async GetWorkflowTypesVersionAliases(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/types/version_aliases/get',
            options
        });
    }
    async GetWorkflowType(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/workflows/types/{workflow_id}/get',
            options
        });
    }
    async ValidateWorkflowParams(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/types/{workflow_id}/validate',
            options
        });
    }
    async Insert(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/insert',
            options
        });
    }
    async BulkInsert(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/bulk_insert',
            options
        });
    }
    async GetFileUploadUrlsForDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/get_file_upload_urls',
            options
        });
    }
    async GetTemporaryFileUploadUrl(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/services/get_temporary_file_upload_url',
            options
        });
    }
    async ListFileUploadsForDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/list_file_uploads',
            options
        });
    }
    async ParseBlob(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/parse_blob',
            options
        });
    }
    async CopyForeignDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/admin/copy_foreign_dataset',
            options
        });
    }
    async CreateProjectReadKey(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/admin/request_read_api_key',
            options
        });
    }
    async GenerateOnboarding(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/onboard/generate',
            options
        });
    }
    async DeleteDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/delete',
            options
        });
    }
    async CreateDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/create',
            options
        });
    }
    async GetSchema(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/schema',
            options
        });
    }
    async ListDatasets(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/list',
            options
        });
    }
    async CombineDatasets(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/combine',
            options
        });
    }
    async GetCombineJobStatus(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/combine/{job_id}/get',
            options
        });
    }
    async SearchDatasets(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/search',
            options
        });
    }
    async GetFieldHealth(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/monitor/health',
            options
        });
    }
    async GetDatasetStats(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/monitor/stats',
            options
        });
    }
    async GetVectorMappings(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/vector_mappings',
            options
        });
    }
    async GetDatasetDetails(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/details',
            options
        });
    }
    async GetDocument(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/documents/get',
            options
        });
    }
    async DeleteDocument(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/delete',
            options
        });
    }
    async UpsertDatasetSettings(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/settings',
            options
        });
    }
    async GetDatasetSettings(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/settings',
            options
        });
    }
    async UpsertDatasetMetadata(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/metadata',
            options
        });
    }
    async GetDatasetMetadata(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/metadata',
            options
        });
    }
    async Update(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/update',
            options
        });
    }
    async DeleteDocumentFields(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/delete_fields',
            options
        });
    }
    async BulkUpdate(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/bulk_update',
            options
        });
    }
    async UpdateWhere(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/update_where',
            options
        });
    }
    async AppendTags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/tags/append',
            options
        });
    }
    async DeleteTags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/tags/delete',
            options
        });
    }
    async MergeTags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/tags/merge',
            options
        });
    }
    async EditTags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/tags/edit',
            options
        });
    }
    async ListFacets(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/facets',
            options
        });
    }
    async GetWhere(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/get_where',
            options
        });
    }
    async PaginateDocuments(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/paginate',
            options
        });
    }
    async CreateDatasetSummary(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/summaries/create',
            options
        });
    }
    async ListDatasetSummaryHistory(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/summaries/history/list',
            options
        });
    }
    async BulkGetDocuments(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/bulk_get',
            options
        });
    }
    async BulkDeleteDocuments(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/bulk_delete',
            options
        });
    }
    async ListDocuments(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/documents/list',
            options
        });
    }
    async DeleteWhere(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/documents/delete_where',
            options
        });
    }
    async SimpleSearchPost(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/simple_search',
            options
        });
    }
    async Search(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/search',
            options
        });
    }
    async Recommend(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/recommend',
            options
        });
    }
    async CloneDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/clone',
            options
        });
    }
    async PredictKNNRegression(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/services/prediction/regression/knn',
            options
        });
    }
    async PredictKNNFromResults(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/services/prediction/knn_from_results',
            options
        });
    }
    async BiasEvaluation(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/services/evaluation/bias',
            options
        });
    }
    async Vectorize(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/services/vectorize',
            options
        });
    }
    async VectorizeAndInsert(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/services/vectorize/{dataset_id}/vectorize_and_insert',
            options
        });
    }
    async VectorizeField(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/services/vectorize/{dataset_id}',
            options
        });
    }
    async ListDatasetWorkflowsByFields(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/workflows_by_fields',
            options
        });
    }
    async GetAPIHealth(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/health',
            options
        });
    }
    async DeleteFieldChildren(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/field_children/{fieldchildren_id}/delete',
            options
        });
    }
    async ListFieldChildrens(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/field_children/list',
            options
        });
    }
    async UpdateFieldChildren(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/field_children/{fieldchildren_id}/update',
            options
        });
    }
    async DeleteFavouriteWorkflow(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/favourites/{favouriteworkflow_id}/delete',
            options
        });
    }
    async ListFavouriteWorkflows(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/favourites/list',
            options
        });
    }
    async UpdateFavouriteWorkflow(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/workflows/favourites/{favouriteworkflow_id}/update',
            options
        });
    }
    async DeleteSavedFilter(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/savedfilters/{savedfilter_id}/delete',
            options
        });
    }
    async ListSavedFilters(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/savedfilters/list',
            options
        });
    }
    async UpdateSavedFilter(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/savedfilters/{savedfilter_id}/update',
            options
        });
    }
    async GetSavedFilter(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/savedfilters/{savedfilter_id}/get',
            options
        });
    }
    async CreateSavedFilter(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/savedfilters/create',
            options
        });
    }
    async DeleteComponent(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/components/{component_id}/delete',
            options
        });
    }
    async ListComponents(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/components/list',
            options
        });
    }
    async UpdateComponent(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/components/{component_id}/update',
            options
        });
    }
    async GetComponent(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/components/{component_id}/get',
            options
        });
    }
    async CreateComponent(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/components/create',
            options
        });
    }
    async ListDatasetEditorHistorys(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/editor/history/list',
            options
        });
    }
    async CreateDatasetEditorHistory(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/editor/history/create',
            options
        });
    }
    async ListEditorConfigurations(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/editor/configuration/list',
            options
        });
    }
    async CreateEditorConfiguration(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/editor/configuration/create',
            options
        });
    }
    async UpdateEditorConfiguration(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/editor/configuration/{editorconfiguration_id}/update',
            options
        });
    }
    async DeleteEditorConfiguration(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/editor/configuration/{editorconfiguration_id}/delete',
            options
        });
    }
    async GetEditorConfiguration(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/editor/configuration/{editorconfiguration_id}/get',
            options
        });
    }
    async ListKeyphrases(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/fields/{field}/keyphrase/list',
            options
        });
    }
    async UpdateKeyphrase(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/fields/{field}/keyphrase/{keyphrase_id}/update',
            options
        });
    }
    async DeleteKeyphrase(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/fields/{field}/keyphrase/{keyphrase_id}/delete',
            options
        });
    }
    async GetKeyphrase(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/fields/{field}/keyphrase/{keyphrase_id}/get',
            options
        });
    }
    async BulkUpdateKeyphrases(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/fields/{field}/keyphrase/bulk_update',
            options
        });
    }
    async BulkDeleteKeyphrases(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/fields/{field}/keyphrase/bulk_delete',
            options
        });
    }
    async ListTaxonomys(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/taxonomys/list',
            options
        });
    }
    async UpdateTaxonomy(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/taxonomys/{taxonomy_id}/update',
            options
        });
    }
    async DeleteTaxonomy(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/taxonomys/{taxonomy_id}/delete',
            options
        });
    }
    async GetTaxonomy(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/taxonomys/{taxonomy_id}/get',
            options
        });
    }
    async CreateTaxonomy(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/taxonomys/create',
            options
        });
    }
    async DeleteFavouriteDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/favourites/{favouritedataset_id}/delete',
            options
        });
    }
    async ListFavouriteDatasets(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/favourites/list',
            options
        });
    }
    async UpdateFavouriteDataset(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/favourites/{favouritedataset_id}/update',
            options
        });
    }
    async DeleteFavouriteDeployable(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployable/favourites/{favouritedeployable_id}/delete',
            options
        });
    }
    async ListFavouriteDeployables(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployable/favourites/list',
            options
        });
    }
    async UpdateFavouriteDeployable(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/deployable/favourites/{favouritedeployable_id}/update',
            options
        });
    }
    async DeleteUserOnboardingFlag(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/useronboardingflags/{useronboardingflag_id}/delete',
            options
        });
    }
    async ListUserOnboardingFlags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/useronboardingflags/list',
            options
        });
    }
    async UpdateUserOnboardingFlag(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/useronboardingflags/{useronboardingflag_id}/update',
            options
        });
    }
    async GetTranscriptTagList(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/fields/{field}/transcript_tags/{transcripttaglist_id}/get',
            options
        });
    }
    async UpdateTranscriptTagList(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/fields/{field}/transcript_tags/{transcripttaglist_id}/update',
            options
        });
    }
    async ListTranscriptTagLists(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/fields/{field}/transcript_tags/list',
            options
        });
    }
    async ListTags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/field/{tag_field}/tags/list',
            options
        });
    }
    async DeleteTag(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/field/{tag_field}/tags/{tag_id}/delete',
            options
        });
    }
    async GetTag(input, options) {
        return this.SendRequest({
            input,
            method: 'get',
            path: '/datasets/{dataset_id}/field/{tag_field}/tags/{tag_id}/get',
            options
        });
    }
    async BulkDeleteTags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/field/{tag_field}/tags/bulk_delete',
            options
        });
    }
    async BulkUpdateTags(input, options) {
        return this.SendRequest({
            input,
            method: 'post',
            path: '/datasets/{dataset_id}/field/{tag_field}/tags/bulk_update',
            options
        });
    }
}
exports.VecDBApiClient = VecDBApiClient;
