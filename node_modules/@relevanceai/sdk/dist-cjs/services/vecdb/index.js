"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VecDBClient = exports._QueryBuilder = exports._FilterBuilder = exports.FilterBuilder = exports.QueryBuilder = void 0;
const __1 = require("../../");
const Dataset_1 = require("./Dataset");
function QueryBuilder() {
    return new _QueryBuilder();
}
exports.QueryBuilder = QueryBuilder;
function FilterBuilder() {
    return new _FilterBuilder();
}
exports.FilterBuilder = FilterBuilder;
class _FilterBuilder {
    constructor() {
        this.body = { filters: [], fieldsToAggregate: [], fieldsToAggregateStats: [] };
    }
    buildFilters() {
        return this.body.filters;
    }
    rawFilter(filter) {
        var _a;
        (_a = this.body.filters) === null || _a === void 0 ? void 0 : _a.push(filter);
        return this;
    }
    filter(type, key, value, ...options) {
        var _a;
        (_a = this.body.filters) === null || _a === void 0 ? void 0 : _a.push({
            [type]: {
                key,
                value,
                ...options
            }
        });
        return this;
    }
    match(field, value) {
        var _a;
        (_a = this.body.filters) === null || _a === void 0 ? void 0 : _a.push({ match: { field: field, value } });
        return this;
    }
    wildcard(field, value) {
        var _a;
        (_a = this.body.filters) === null || _a === void 0 ? void 0 : _a.push({ wildcard: { field: field, value } });
        return this;
    }
    range(field, options) {
        var _a;
        (_a = this.body.filters) === null || _a === void 0 ? void 0 : _a.push({ range: { field: field, ...options } });
        return this;
    }
    or(filters) {
        var _a;
        (_a = this.body.filters) === null || _a === void 0 ? void 0 : _a.push({ or: filters.map(f => { var _a; return (_a = f.body.filters) !== null && _a !== void 0 ? _a : []; }) });
        return this;
    }
}
exports._FilterBuilder = _FilterBuilder;
class _QueryBuilder extends _FilterBuilder {
    constructor() {
        super();
        this.shouldPerformTextQuery = false;
    }
    build() {
        if (!this.shouldPerformTextQuery)
            return this.body;
        if (!this.defaultQueryValue)
            throw new Error("Please set the search query by calling .query('my search query') before performing a text search.");
        this.body.query = this.defaultQueryValue;
        return this.body;
    }
    vector(field, ...args) {
        if (!Array.isArray(this.body.vectorSearchQuery))
            this.body.vectorSearchQuery = [];
        let payload = { field }; // TODO components['schemas']['simpleSearchAndFlatFilterItem']['search']['vectorSearchQuery']
        const inferredModelMatch = field.match(/_(.*)_.*vector_/); // title_text@1-0_vector_ -> text@1-0
        if (inferredModelMatch && inferredModelMatch[1])
            payload.model = inferredModelMatch[1]; // this can be overridden
        for (const arg of args) {
            if (typeof arg === 'number')
                payload.weight = arg; // weight
            else
                payload = { ...payload, ...arg }; // options
        }
        this.body.vectorSearchQuery.push(payload);
        return this;
    }
    sort(field, direction) {
        var _a, _b;
        if (!((_b = (_a = this === null || this === void 0 ? void 0 : this.body) === null || _a === void 0 ? void 0 : _a.sort) === null || _b === void 0 ? void 0 : _b.length))
            this.body.sort = {};
        this.body.sort[field] = direction;
        return this;
    }
    rawOption(key, value) {
        this.body[key] = value;
        return this;
    }
    minimumRelevance(value) {
        this.body.minimumRelevance = value;
        return this;
    }
    page(value) {
        this.body.page = value;
        return this;
    }
    pageSize(value) {
        this.body.pageSize = value;
        return this;
    }
    includeFields(fields) {
        this.body.includeFields = fields;
        return this;
    }
    ask(query, field, options) {
        var _a;
        this.body.instantAnswerQuery = {
            query,
            field: field,
            preset: (_a = options.preset) !== null && _a !== void 0 ? _a : 'support3',
            ...(options.titleReferenceField ? { titleReferenceField: options.titleReferenceField } : {}),
            ...(options.urlReferenceField ? { urlReferenceField: options.urlReferenceField } : {}),
        };
        return this;
    }
}
exports._QueryBuilder = _QueryBuilder;
class VecDBClient {
    constructor(config) {
        this.apiClient = new __1.VecDBApiClient(config !== null && config !== void 0 ? config : {});
    }
    dataset(name, options) {
        let dataset = new Dataset_1.Dataset(this, name, options);
        return dataset;
    }
}
exports.VecDBClient = VecDBClient;
