import { CommandInput, _GenericClient, CommandOutput, _ClientInput, _GenericMethodOptions } from '../shared/BaseClient';
import { operations } from './_VecDBApiSchemaTypes';
export declare type CreateDeployableInput = operations['CreateDeployable']['requestBody']['content']['application/json'];
export declare type CreateDeployableOutput = operations['CreateDeployable']['responses']['200']['content']['application/json'];
export declare type GetDeployableInput = {};
export declare type GetDeployableOutput = operations['GetDeployable']['responses']['200']['content']['application/json'];
export declare type UpdateDeployableInput = operations['UpdateDeployable']['requestBody']['content']['application/json'];
export declare type UpdateDeployableOutput = operations['UpdateDeployable']['responses']['200']['content']['application/json'];
export declare type DeleteDeployableInput = operations['DeleteDeployable']['requestBody']['content']['application/json'];
export declare type DeleteDeployableOutput = operations['DeleteDeployable']['responses']['200']['content']['application/json'];
export declare type CreateDeployableKeyInput = operations['CreateDeployableKey']['requestBody']['content']['application/json'];
export declare type CreateDeployableKeyOutput = operations['CreateDeployableKey']['responses']['200']['content']['application/json'];
export declare type CreateDeployableInviteInput = operations['CreateDeployableInvite']['requestBody']['content']['application/json'];
export declare type CreateDeployableInviteOutput = operations['CreateDeployableInvite']['responses']['200']['content']['application/json'];
export declare type UpdateUsersDeployablePermissionsInput = operations['UpdateUsersDeployablePermissions']['requestBody']['content']['application/json'];
export declare type UpdateUsersDeployablePermissionsOutput = operations['UpdateUsersDeployablePermissions']['responses']['200']['content']['application/json'];
export declare type DeleteDeployableKeyInput = operations['DeleteDeployableKey']['requestBody']['content']['application/json'];
export declare type DeleteDeployableKeyOutput = operations['DeleteDeployableKey']['responses']['200']['content']['application/json'];
export declare type ListDeployablesInput = {};
export declare type ListDeployablesOutput = operations['ListDeployables']['responses']['200']['content']['application/json'];
export declare type DeleteDeployableGroupInput = operations['DeleteDeployableGroup']['requestBody']['content']['application/json'];
export declare type DeleteDeployableGroupOutput = operations['DeleteDeployableGroup']['responses']['200']['content']['application/json'];
export declare type ListDeployableGroupsInput = operations['ListDeployableGroups']['requestBody']['content']['application/json'];
export declare type ListDeployableGroupsOutput = operations['ListDeployableGroups']['responses']['200']['content']['application/json'];
export declare type CreateDeployableGroupInput = operations['CreateDeployableGroup']['requestBody']['content']['application/json'];
export declare type CreateDeployableGroupOutput = operations['CreateDeployableGroup']['responses']['200']['content']['application/json'];
export declare type GetDeployableGroupInput = {};
export declare type GetDeployableGroupOutput = operations['GetDeployableGroup']['responses']['200']['content']['application/json'];
export declare type UpdateDeployableGroupInput = operations['UpdateDeployableGroup']['requestBody']['content']['application/json'];
export declare type UpdateDeployableGroupOutput = operations['UpdateDeployableGroup']['responses']['200']['content']['application/json'];
export declare type CreateDeployableGroupKeyInput = operations['CreateDeployableGroupKey']['requestBody']['content']['application/json'];
export declare type CreateDeployableGroupKeyOutput = operations['CreateDeployableGroupKey']['responses']['200']['content']['application/json'];
export declare type DeleteDeployableGroupKeyInput = operations['DeleteDeployableGroupKey']['requestBody']['content']['application/json'];
export declare type DeleteDeployableGroupKeyOutput = operations['DeleteDeployableGroupKey']['responses']['200']['content']['application/json'];
export declare type CreateProjectInput = operations['CreateProject']['requestBody']['content']['application/json'];
export declare type CreateProjectOutput = operations['CreateProject']['responses']['200']['content']['application/json'];
export declare type UpdateProjectInput = operations['UpdateProject']['requestBody']['content']['application/json'];
export declare type UpdateProjectOutput = operations['UpdateProject']['responses']['200']['content']['application/json'];
export declare type TransferProjectToOrganizationInput = operations['TransferProjectToOrganization']['requestBody']['content']['application/json'];
export declare type TransferProjectToOrganizationOutput = operations['TransferProjectToOrganization']['responses']['200']['content']['application/json'];
export declare type ListProjectsInput = {};
export declare type ListProjectsOutput = operations['ListProjects']['responses']['200']['content']['application/json'];
export declare type GetProjectsOrgInfoInput = {};
export declare type GetProjectsOrgInfoOutput = operations['GetProjectsOrgInfo']['responses']['200']['content']['application/json'];
export declare type ListProjectKeysInput = {};
export declare type ListProjectKeysOutput = operations['ListProjectKeys']['responses']['200']['content']['application/json'];
export declare type GetProjectKeyInput = operations['GetProjectKey']['requestBody']['content']['application/json'];
export declare type GetProjectKeyOutput = operations['GetProjectKey']['responses']['200']['content']['application/json'];
export declare type SetProjectKeyInput = operations['SetProjectKey']['requestBody']['content']['application/json'];
export declare type SetProjectKeyOutput = operations['SetProjectKey']['responses']['200']['content']['application/json'];
export declare type DeleteProjectKeyInput = operations['DeleteProjectKey']['requestBody']['content']['application/json'];
export declare type DeleteProjectKeyOutput = operations['DeleteProjectKey']['responses']['200']['content']['application/json'];
export declare type CreateUserInput = operations['CreateUser']['requestBody']['content']['application/json'];
export declare type CreateUserOutput = operations['CreateUser']['responses']['200']['content']['application/json'];
export declare type ListUsersInput = operations['ListUsers']['requestBody']['content']['application/json'];
export declare type ListUsersOutput = operations['ListUsers']['responses']['200']['content']['application/json'];
export declare type IsUserAuthorizedInput = operations['IsUserAuthorized']['requestBody']['content']['application/json'];
export declare type IsUserAuthorizedOutput = operations['IsUserAuthorized']['responses']['200']['content']['application/json'];
export declare type GetAuthHeaderInfoInput = {};
export declare type GetAuthHeaderInfoOutput = operations['GetAuthHeaderInfo']['responses']['200']['content']['application/json'];
export declare type CreateProjectInviteInput = operations['CreateProjectInvite']['requestBody']['content']['application/json'];
export declare type CreateProjectInviteOutput = operations['CreateProjectInvite']['responses']['200']['content']['application/json'];
export declare type ListProjectInvitesInput = operations['ListProjectInvites']['requestBody']['content']['application/json'];
export declare type ListProjectInvitesOutput = operations['ListProjectInvites']['responses']['200']['content']['application/json'];
export declare type AcceptProjectInviteInput = operations['AcceptProjectInvite']['requestBody']['content']['application/json'];
export declare type AcceptProjectInviteOutput = operations['AcceptProjectInvite']['responses']['200']['content']['application/json'];
export declare type DeleteProjectInviteInput = operations['DeleteProjectInvite']['requestBody']['content']['application/json'];
export declare type DeleteProjectInviteOutput = operations['DeleteProjectInvite']['responses']['200']['content']['application/json'];
export declare type ResendProjectInviteInput = operations['ResendProjectInvite']['requestBody']['content']['application/json'];
export declare type ResendProjectInviteOutput = operations['ResendProjectInvite']['responses']['200']['content']['application/json'];
export declare type GetUserInput = {};
export declare type GetUserOutput = operations['GetUser']['responses']['200']['content']['application/json'];
export declare type UpdateUserInput = operations['UpdateUser']['requestBody']['content']['application/json'];
export declare type UpdateUserOutput = operations['UpdateUser']['responses']['200']['content']['application/json'];
export declare type DeleteUserInput = operations['DeleteUser']['requestBody']['content']['application/json'];
export declare type DeleteUserOutput = operations['DeleteUser']['responses']['200']['content']['application/json'];
export declare type CreateUserKeyInput = operations['CreateUserKey']['requestBody']['content']['application/json'];
export declare type CreateUserKeyOutput = operations['CreateUserKey']['responses']['200']['content']['application/json'];
export declare type ListUserKeysInput = operations['ListUserKeys']['requestBody']['content']['application/json'];
export declare type ListUserKeysOutput = operations['ListUserKeys']['responses']['200']['content']['application/json'];
export declare type DeleteUserKeyInput = operations['DeleteUserKey']['requestBody']['content']['application/json'];
export declare type DeleteUserKeyOutput = operations['DeleteUserKey']['responses']['200']['content']['application/json'];
export declare type InsertClusterCentroidsInput = operations['InsertClusterCentroids']['requestBody']['content']['application/json'];
export declare type InsertClusterCentroidsOutput = operations['InsertClusterCentroids']['responses']['200']['content']['application/json'];
export declare type UpdateClusterCentroidsInput = operations['UpdateClusterCentroids']['requestBody']['content']['application/json'];
export declare type UpdateClusterCentroidsOutput = operations['UpdateClusterCentroids']['responses']['200']['content']['application/json'];
export declare type CompareClusterCentroidsInput = operations['CompareClusterCentroids']['requestBody']['content']['application/json'];
export declare type CompareClusterCentroidsOutput = operations['CompareClusterCentroids']['responses']['200']['content']['application/json'];
export declare type AggregateInput = operations['Aggregate']['requestBody']['content']['application/json'];
export declare type AggregateOutput = operations['Aggregate']['responses']['200']['content']['application/json'];
export declare type AggregateClustersInput = operations['AggregateClusters']['requestBody']['content']['application/json'];
export declare type AggregateClustersOutput = operations['AggregateClusters']['responses']['200']['content']['application/json'];
export declare type ListClusterFacetsInput = operations['ListClusterFacets']['requestBody']['content']['application/json'];
export declare type ListClusterFacetsOutput = operations['ListClusterFacets']['responses']['200']['content']['application/json'];
export declare type ListClosestToCentroidsInput = operations['ListClosestToCentroids']['requestBody']['content']['application/json'];
export declare type ListClosestToCentroidsOutput = operations['ListClosestToCentroids']['responses']['200']['content']['application/json'];
export declare type ListFurthestFromCentroidsInput = operations['ListFurthestFromCentroids']['requestBody']['content']['application/json'];
export declare type ListFurthestFromCentroidsOutput = operations['ListFurthestFromCentroids']['responses']['200']['content']['application/json'];
export declare type ListCentroidsInput = operations['ListCentroids']['requestBody']['content']['application/json'];
export declare type ListCentroidsOutput = operations['ListCentroids']['responses']['200']['content']['application/json'];
export declare type ListCentroidConfigsInput = {};
export declare type ListCentroidConfigsOutput = operations['ListCentroidConfigs']['responses']['200']['content']['application/json'];
export declare type DeleteCentroidInput = operations['DeleteCentroid']['requestBody']['content']['application/json'];
export declare type DeleteCentroidOutput = operations['DeleteCentroid']['responses']['200']['content']['application/json'];
export declare type RealtimeClusteringInput = operations['RealtimeClustering']['requestBody']['content']['application/json'];
export declare type RealtimeClusteringOutput = operations['RealtimeClustering']['responses']['200']['content']['application/json'];
export declare type MergeClustersInput = operations['MergeClusters']['requestBody']['content']['application/json'];
export declare type MergeClustersOutput = operations['MergeClusters']['responses']['200']['content']['application/json'];
export declare type CreateClusterSummariesInput = operations['CreateClusterSummaries']['requestBody']['content']['application/json'];
export declare type CreateClusterSummariesOutput = operations['CreateClusterSummaries']['responses']['200']['content']['application/json'];
export declare type CreateClusterLabelsInput = operations['CreateClusterLabels']['requestBody']['content']['application/json'];
export declare type CreateClusterLabelsOutput = operations['CreateClusterLabels']['responses']['200']['content']['application/json'];
export declare type ListClusterSummariesInput = operations['ListClusterSummaries']['requestBody']['content']['application/json'];
export declare type ListClusterSummariesOutput = operations['ListClusterSummaries']['responses']['200']['content']['application/json'];
export declare type CreateHierarchicalClustersInput = operations['CreateHierarchicalClusters']['requestBody']['content']['application/json'];
export declare type CreateHierarchicalClustersOutput = operations['CreateHierarchicalClusters']['responses']['200']['content']['application/json'];
export declare type DeleteClusterSummariesInput = operations['DeleteClusterSummaries']['requestBody']['content']['application/json'];
export declare type DeleteClusterSummariesOutput = operations['DeleteClusterSummaries']['responses']['200']['content']['application/json'];
export declare type EditOneToManyClustersInput = operations['EditOneToManyClusters']['requestBody']['content']['application/json'];
export declare type EditOneToManyClustersOutput = operations['EditOneToManyClusters']['responses']['200']['content']['application/json'];
export declare type EditListInDocumentsInput = operations['EditListInDocuments']['requestBody']['content']['application/json'];
export declare type EditListInDocumentsOutput = operations['EditListInDocuments']['responses']['200']['content']['application/json'];
export declare type CreateOrganizationInput = operations['CreateOrganization']['requestBody']['content']['application/json'];
export declare type CreateOrganizationOutput = operations['CreateOrganization']['responses']['200']['content']['application/json'];
export declare type UpdateOrganizationInput = operations['UpdateOrganization']['requestBody']['content']['application/json'];
export declare type UpdateOrganizationOutput = operations['UpdateOrganization']['responses']['200']['content']['application/json'];
export declare type UpdateOrganizationAdminInput = operations['UpdateOrganizationAdmin']['requestBody']['content']['application/json'];
export declare type UpdateOrganizationAdminOutput = operations['UpdateOrganizationAdmin']['responses']['200']['content']['application/json'];
export declare type ListOrganizationsInput = {};
export declare type ListOrganizationsOutput = operations['ListOrganizations']['responses']['200']['content']['application/json'];
export declare type DeleteOrganizationInput = operations['DeleteOrganization']['requestBody']['content']['application/json'];
export declare type DeleteOrganizationOutput = operations['DeleteOrganization']['responses']['200']['content']['application/json'];
export declare type GetOrganizationInput = {};
export declare type GetOrganizationOutput = operations['GetOrganization']['responses']['200']['content']['application/json'];
export declare type GetOrganizationUsageInput = {};
export declare type GetOrganizationUsageOutput = operations['GetOrganizationUsage']['responses']['200']['content']['application/json'];
export declare type ListUsersInOrganizationInput = {};
export declare type ListUsersInOrganizationOutput = operations['ListUsersInOrganization']['responses']['200']['content']['application/json'];
export declare type ListProjectsInOrganizationInput = {};
export declare type ListProjectsInOrganizationOutput = operations['ListProjectsInOrganization']['responses']['200']['content']['application/json'];
export declare type AggregateOrganizationMetricsInput = operations['AggregateOrganizationMetrics']['requestBody']['content']['application/json'];
export declare type AggregateOrganizationMetricsOutput = operations['AggregateOrganizationMetrics']['responses']['200']['content']['application/json'];
export declare type ListBillingEventsInput = operations['ListBillingEvents']['requestBody']['content']['application/json'];
export declare type ListBillingEventsOutput = operations['ListBillingEvents']['responses']['200']['content']['application/json'];
export declare type CreateBillingEventAdminInput = operations['CreateBillingEventAdmin']['requestBody']['content']['application/json'];
export declare type CreateBillingEventAdminOutput = operations['CreateBillingEventAdmin']['responses']['200']['content']['application/json'];
export declare type GetBillingFrontendLinkInput = {};
export declare type GetBillingFrontendLinkOutput = operations['GetBillingFrontendLink']['responses']['200']['content']['application/json'];
export declare type UpdateOrganizationBillingInput = operations['UpdateOrganizationBilling']['requestBody']['content']['application/json'];
export declare type UpdateOrganizationBillingOutput = operations['UpdateOrganizationBilling']['responses']['200']['content']['application/json'];
export declare type CreateConnectorInput = operations['CreateConnector']['requestBody']['content']['application/json'];
export declare type CreateConnectorOutput = operations['CreateConnector']['responses']['200']['content']['application/json'];
export declare type CheckConnectionInput = operations['CheckConnection']['requestBody']['content']['application/json'];
export declare type CheckConnectionOutput = operations['CheckConnection']['responses']['200']['content']['application/json'];
export declare type GetConnectorInput = {};
export declare type GetConnectorOutput = operations['GetConnector']['responses']['200']['content']['application/json'];
export declare type UpdateConnectorInput = operations['UpdateConnector']['requestBody']['content']['application/json'];
export declare type UpdateConnectorOutput = operations['UpdateConnector']['responses']['200']['content']['application/json'];
export declare type TriggerConnectorInput = operations['TriggerConnector']['requestBody']['content']['application/json'];
export declare type TriggerConnectorOutput = operations['TriggerConnector']['responses']['200']['content']['application/json'];
export declare type DeleteConnectorInput = operations['DeleteConnector']['requestBody']['content']['application/json'];
export declare type DeleteConnectorOutput = operations['DeleteConnector']['responses']['200']['content']['application/json'];
export declare type ListConnectorsInput = {};
export declare type ListConnectorsOutput = operations['ListConnectors']['responses']['200']['content']['application/json'];
export declare type ListConnectorTypesInput = {};
export declare type ListConnectorTypesOutput = operations['ListConnectorTypes']['responses']['200']['content']['application/json'];
export declare type GetConnectorTypeInput = {};
export declare type GetConnectorTypeOutput = operations['GetConnectorType']['responses']['200']['content']['application/json'];
export declare type ListConnectorJobsInput = {};
export declare type ListConnectorJobsOutput = operations['ListConnectorJobs']['responses']['200']['content']['application/json'];
export declare type GetConnectorJobInput = {};
export declare type GetConnectorJobOutput = operations['GetConnectorJob']['responses']['200']['content']['application/json'];
export declare type TriggerWorkflowInput = operations['TriggerWorkflow']['requestBody']['content']['application/json'];
export declare type TriggerWorkflowOutput = operations['TriggerWorkflow']['responses']['200']['content']['application/json'];
export declare type ListWorkflowsInput = {};
export declare type ListWorkflowsOutput = operations['ListWorkflows']['responses']['200']['content']['application/json'];
export declare type GetWorkflowStatusInput = operations['GetWorkflowStatus']['requestBody']['content']['application/json'];
export declare type GetWorkflowStatusOutput = operations['GetWorkflowStatus']['responses']['200']['content']['application/json'];
export declare type GetWorkflowConfigInput = operations['GetWorkflowConfig']['requestBody']['content']['application/json'];
export declare type GetWorkflowConfigOutput = operations['GetWorkflowConfig']['responses']['200']['content']['application/json'];
export declare type DeleteWorkflowStatusInput = operations['DeleteWorkflowStatus']['requestBody']['content']['application/json'];
export declare type DeleteWorkflowStatusOutput = operations['DeleteWorkflowStatus']['responses']['200']['content']['application/json'];
export declare type TerminateWorkflowInput = operations['TerminateWorkflow']['requestBody']['content']['application/json'];
export declare type TerminateWorkflowOutput = operations['TerminateWorkflow']['responses']['200']['content']['application/json'];
export declare type UpsertWorkflowMetadataInput = operations['UpsertWorkflowMetadata']['requestBody']['content']['application/json'];
export declare type UpsertWorkflowMetadataOutput = operations['UpsertWorkflowMetadata']['responses']['200']['content']['application/json'];
export declare type UpsertWorkflowProgressInput = operations['UpsertWorkflowProgress']['requestBody']['content']['application/json'];
export declare type UpsertWorkflowProgressOutput = operations['UpsertWorkflowProgress']['responses']['200']['content']['application/json'];
export declare type UpsertWorkflowStatusInput = operations['UpsertWorkflowStatus']['requestBody']['content']['application/json'];
export declare type UpsertWorkflowStatusOutput = operations['UpsertWorkflowStatus']['responses']['200']['content']['application/json'];
export declare type ListWorkflowTypesInput = {};
export declare type ListWorkflowTypesOutput = operations['ListWorkflowTypes']['responses']['200']['content']['application/json'];
export declare type SearchWorkflowTypesInput = operations['SearchWorkflowTypes']['requestBody']['content']['application/json'];
export declare type SearchWorkflowTypesOutput = operations['SearchWorkflowTypes']['responses']['200']['content']['application/json'];
export declare type GetWorkflowTypesAsOpenAPIInput = {};
export declare type GetWorkflowTypesAsOpenAPIOutput = operations['GetWorkflowTypesAsOpenAPI']['responses']['200']['content']['application/json'];
export declare type AggregateWorkflowTypesInput = operations['AggregateWorkflowTypes']['requestBody']['content']['application/json'];
export declare type AggregateWorkflowTypesOutput = operations['AggregateWorkflowTypes']['responses']['200']['content']['application/json'];
export declare type BulkUpdateWorkflowTypesAdminInput = operations['BulkUpdateWorkflowTypesAdmin']['requestBody']['content']['application/json'];
export declare type BulkUpdateWorkflowTypesAdminOutput = operations['BulkUpdateWorkflowTypesAdmin']['responses']['200']['content']['application/json'];
export declare type UpdateWorkflowTypesVersionAliasesAdminInput = operations['UpdateWorkflowTypesVersionAliasesAdmin']['requestBody']['content']['application/json'];
export declare type UpdateWorkflowTypesVersionAliasesAdminOutput = operations['UpdateWorkflowTypesVersionAliasesAdmin']['responses']['200']['content']['application/json'];
export declare type GetWorkflowTypesVersionAliasesInput = operations['GetWorkflowTypesVersionAliases']['requestBody']['content']['application/json'];
export declare type GetWorkflowTypesVersionAliasesOutput = operations['GetWorkflowTypesVersionAliases']['responses']['200']['content']['application/json'];
export declare type GetWorkflowTypeInput = {};
export declare type GetWorkflowTypeOutput = operations['GetWorkflowType']['responses']['200']['content']['application/json'];
export declare type ValidateWorkflowParamsInput = operations['ValidateWorkflowParams']['requestBody']['content']['application/json'];
export declare type ValidateWorkflowParamsOutput = operations['ValidateWorkflowParams']['responses']['200']['content']['application/json'];
export declare type InsertInput = operations['Insert']['requestBody']['content']['application/json'];
export declare type InsertOutput = operations['Insert']['responses']['200']['content']['application/json'];
export declare type BulkInsertInput = operations['BulkInsert']['requestBody']['content']['application/json'];
export declare type BulkInsertOutput = operations['BulkInsert']['responses']['200']['content']['application/json'];
export declare type GetFileUploadUrlsForDatasetInput = operations['GetFileUploadUrlsForDataset']['requestBody']['content']['application/json'];
export declare type GetFileUploadUrlsForDatasetOutput = operations['GetFileUploadUrlsForDataset']['responses']['200']['content']['application/json'];
export declare type GetTemporaryFileUploadUrlInput = operations['GetTemporaryFileUploadUrl']['requestBody']['content']['application/json'];
export declare type GetTemporaryFileUploadUrlOutput = operations['GetTemporaryFileUploadUrl']['responses']['200']['content']['application/json'];
export declare type ListFileUploadsForDatasetInput = {};
export declare type ListFileUploadsForDatasetOutput = operations['ListFileUploadsForDataset']['responses']['200']['content']['application/json'];
export declare type ParseBlobInput = operations['ParseBlob']['requestBody']['content']['application/json'];
export declare type ParseBlobOutput = operations['ParseBlob']['responses']['200']['content']['application/json'];
export declare type CopyForeignDatasetInput = operations['CopyForeignDataset']['requestBody']['content']['application/json'];
export declare type CopyForeignDatasetOutput = operations['CopyForeignDataset']['responses']['200']['content']['application/json'];
export declare type CreateProjectReadKeyInput = operations['CreateProjectReadKey']['requestBody']['content']['application/json'];
export declare type CreateProjectReadKeyOutput = operations['CreateProjectReadKey']['responses']['200']['content']['application/json'];
export declare type GenerateOnboardingInput = operations['GenerateOnboarding']['requestBody']['content']['application/json'];
export declare type GenerateOnboardingOutput = operations['GenerateOnboarding']['responses']['200']['content']['application/json'];
export declare type DeleteDatasetInput = operations['DeleteDataset']['requestBody']['content']['application/json'];
export declare type DeleteDatasetOutput = operations['DeleteDataset']['responses']['200']['content']['application/json'];
export declare type CreateDatasetInput = operations['CreateDataset']['requestBody']['content']['application/json'];
export declare type CreateDatasetOutput = operations['CreateDataset']['responses']['200']['content']['application/json'];
export declare type GetSchemaInput = {};
export declare type GetSchemaOutput = operations['GetSchema']['responses']['200']['content']['application/json'];
export declare type ListDatasetsInput = {};
export declare type ListDatasetsOutput = operations['ListDatasets']['responses']['200']['content']['application/json'];
export declare type CombineDatasetsInput = operations['CombineDatasets']['requestBody']['content']['application/json'];
export declare type CombineDatasetsOutput = operations['CombineDatasets']['responses']['200']['content']['application/json'];
export declare type GetCombineJobStatusInput = operations['GetCombineJobStatus']['requestBody']['content']['application/json'];
export declare type GetCombineJobStatusOutput = operations['GetCombineJobStatus']['responses']['200']['content']['application/json'];
export declare type SearchDatasetsInput = {};
export declare type SearchDatasetsOutput = operations['SearchDatasets']['responses']['200']['content']['application/json'];
export declare type GetFieldHealthInput = {};
export declare type GetFieldHealthOutput = operations['GetFieldHealth']['responses']['200']['content']['application/json'];
export declare type GetDatasetStatsInput = {};
export declare type GetDatasetStatsOutput = operations['GetDatasetStats']['responses']['200']['content']['application/json'];
export declare type GetVectorMappingsInput = {};
export declare type GetVectorMappingsOutput = operations['GetVectorMappings']['responses']['200']['content']['application/json'];
export declare type GetDatasetDetailsInput = operations['GetDatasetDetails']['requestBody']['content']['application/json'];
export declare type GetDatasetDetailsOutput = operations['GetDatasetDetails']['responses']['200']['content']['application/json'];
export declare type GetDocumentInput = {};
export declare type GetDocumentOutput = operations['GetDocument']['responses']['200']['content']['application/json'];
export declare type DeleteDocumentInput = operations['DeleteDocument']['requestBody']['content']['application/json'];
export declare type DeleteDocumentOutput = operations['DeleteDocument']['responses']['200']['content']['application/json'];
export declare type UpsertDatasetSettingsInput = operations['UpsertDatasetSettings']['requestBody']['content']['application/json'];
export declare type UpsertDatasetSettingsOutput = operations['UpsertDatasetSettings']['responses']['200']['content']['application/json'];
export declare type GetDatasetSettingsInput = {};
export declare type GetDatasetSettingsOutput = operations['GetDatasetSettings']['responses']['200']['content']['application/json'];
export declare type UpsertDatasetMetadataInput = operations['UpsertDatasetMetadata']['requestBody']['content']['application/json'];
export declare type UpsertDatasetMetadataOutput = operations['UpsertDatasetMetadata']['responses']['200']['content']['application/json'];
export declare type GetDatasetMetadataInput = {};
export declare type GetDatasetMetadataOutput = operations['GetDatasetMetadata']['responses']['200']['content']['application/json'];
export declare type UpdateInput = operations['Update']['requestBody']['content']['application/json'];
export declare type UpdateOutput = operations['Update']['responses']['200']['content']['application/json'];
export declare type DeleteDocumentFieldsInput = operations['DeleteDocumentFields']['requestBody']['content']['application/json'];
export declare type DeleteDocumentFieldsOutput = operations['DeleteDocumentFields']['responses']['200']['content']['application/json'];
export declare type BulkUpdateInput = operations['BulkUpdate']['requestBody']['content']['application/json'];
export declare type BulkUpdateOutput = operations['BulkUpdate']['responses']['200']['content']['application/json'];
export declare type UpdateWhereInput = operations['UpdateWhere']['requestBody']['content']['application/json'];
export declare type UpdateWhereOutput = operations['UpdateWhere']['responses']['200']['content']['application/json'];
export declare type AppendTagsInput = operations['AppendTags']['requestBody']['content']['application/json'];
export declare type AppendTagsOutput = operations['AppendTags']['responses']['200']['content']['application/json'];
export declare type DeleteTagsInput = operations['DeleteTags']['requestBody']['content']['application/json'];
export declare type DeleteTagsOutput = operations['DeleteTags']['responses']['200']['content']['application/json'];
export declare type MergeTagsInput = operations['MergeTags']['requestBody']['content']['application/json'];
export declare type MergeTagsOutput = operations['MergeTags']['responses']['200']['content']['application/json'];
export declare type EditTagsInput = operations['EditTags']['requestBody']['content']['application/json'];
export declare type EditTagsOutput = operations['EditTags']['responses']['200']['content']['application/json'];
export declare type ListFacetsInput = operations['ListFacets']['requestBody']['content']['application/json'];
export declare type ListFacetsOutput = operations['ListFacets']['responses']['200']['content']['application/json'];
export declare type GetWhereInput = operations['GetWhere']['requestBody']['content']['application/json'];
export declare type GetWhereOutput = operations['GetWhere']['responses']['200']['content']['application/json'];
export declare type PaginateDocumentsInput = operations['PaginateDocuments']['requestBody']['content']['application/json'];
export declare type PaginateDocumentsOutput = operations['PaginateDocuments']['responses']['200']['content']['application/json'];
export declare type CreateDatasetSummaryInput = operations['CreateDatasetSummary']['requestBody']['content']['application/json'];
export declare type CreateDatasetSummaryOutput = operations['CreateDatasetSummary']['responses']['200']['content']['application/json'];
export declare type ListDatasetSummaryHistoryInput = {};
export declare type ListDatasetSummaryHistoryOutput = operations['ListDatasetSummaryHistory']['responses']['200']['content']['application/json'];
export declare type BulkGetDocumentsInput = operations['BulkGetDocuments']['requestBody']['content']['application/json'];
export declare type BulkGetDocumentsOutput = operations['BulkGetDocuments']['responses']['200']['content']['application/json'];
export declare type BulkDeleteDocumentsInput = operations['BulkDeleteDocuments']['requestBody']['content']['application/json'];
export declare type BulkDeleteDocumentsOutput = operations['BulkDeleteDocuments']['responses']['200']['content']['application/json'];
export declare type ListDocumentsInput = {};
export declare type ListDocumentsOutput = operations['ListDocuments']['responses']['200']['content']['application/json'];
export declare type DeleteWhereInput = operations['DeleteWhere']['requestBody']['content']['application/json'];
export declare type DeleteWhereOutput = operations['DeleteWhere']['responses']['200']['content']['application/json'];
export declare type SimpleSearchPostInput = operations['SimpleSearchPost']['requestBody']['content']['application/json'];
export declare type SimpleSearchPostOutput = operations['SimpleSearchPost']['responses']['200']['content']['application/json'];
export declare type SearchInput = operations['Search']['requestBody']['content']['application/json'];
export declare type SearchOutput = operations['Search']['responses']['200']['content']['application/json'];
export declare type RecommendInput = operations['Recommend']['requestBody']['content']['application/json'];
export declare type RecommendOutput = operations['Recommend']['responses']['200']['content']['application/json'];
export declare type CloneDatasetInput = operations['CloneDataset']['requestBody']['content']['application/json'];
export declare type CloneDatasetOutput = operations['CloneDataset']['responses']['200']['content']['application/json'];
export declare type PredictKNNRegressionInput = operations['PredictKNNRegression']['requestBody']['content']['application/json'];
export declare type PredictKNNRegressionOutput = operations['PredictKNNRegression']['responses']['200']['content']['application/json'];
export declare type PredictKNNFromResultsInput = operations['PredictKNNFromResults']['requestBody']['content']['application/json'];
export declare type PredictKNNFromResultsOutput = operations['PredictKNNFromResults']['responses']['200']['content']['application/json'];
export declare type BiasEvaluationInput = operations['BiasEvaluation']['requestBody']['content']['application/json'];
export declare type BiasEvaluationOutput = operations['BiasEvaluation']['responses']['200']['content']['application/json'];
export declare type VectorizeInput = operations['Vectorize']['requestBody']['content']['application/json'];
export declare type VectorizeOutput = operations['Vectorize']['responses']['200']['content']['application/json'];
export declare type VectorizeAndInsertInput = operations['VectorizeAndInsert']['requestBody']['content']['application/json'];
export declare type VectorizeAndInsertOutput = operations['VectorizeAndInsert']['responses']['200']['content']['application/json'];
export declare type VectorizeFieldInput = operations['VectorizeField']['requestBody']['content']['application/json'];
export declare type VectorizeFieldOutput = operations['VectorizeField']['responses']['200']['content']['application/json'];
export declare type ListDatasetWorkflowsByFieldsInput = {};
export declare type ListDatasetWorkflowsByFieldsOutput = operations['ListDatasetWorkflowsByFields']['responses']['200']['content']['application/json'];
export declare type GetAPIHealthInput = {};
export declare type GetAPIHealthOutput = operations['GetAPIHealth']['responses']['200']['content']['application/json'];
export declare type DeleteFieldChildrenInput = operations['DeleteFieldChildren']['requestBody']['content']['application/json'];
export declare type DeleteFieldChildrenOutput = operations['DeleteFieldChildren']['responses']['200']['content']['application/json'];
export declare type ListFieldChildrensInput = operations['ListFieldChildrens']['requestBody']['content']['application/json'];
export declare type ListFieldChildrensOutput = operations['ListFieldChildrens']['responses']['200']['content']['application/json'];
export declare type UpdateFieldChildrenInput = operations['UpdateFieldChildren']['requestBody']['content']['application/json'];
export declare type UpdateFieldChildrenOutput = operations['UpdateFieldChildren']['responses']['200']['content']['application/json'];
export declare type DeleteFavouriteWorkflowInput = operations['DeleteFavouriteWorkflow']['requestBody']['content']['application/json'];
export declare type DeleteFavouriteWorkflowOutput = operations['DeleteFavouriteWorkflow']['responses']['200']['content']['application/json'];
export declare type ListFavouriteWorkflowsInput = operations['ListFavouriteWorkflows']['requestBody']['content']['application/json'];
export declare type ListFavouriteWorkflowsOutput = operations['ListFavouriteWorkflows']['responses']['200']['content']['application/json'];
export declare type UpdateFavouriteWorkflowInput = operations['UpdateFavouriteWorkflow']['requestBody']['content']['application/json'];
export declare type UpdateFavouriteWorkflowOutput = operations['UpdateFavouriteWorkflow']['responses']['200']['content']['application/json'];
export declare type DeleteSavedFilterInput = operations['DeleteSavedFilter']['requestBody']['content']['application/json'];
export declare type DeleteSavedFilterOutput = operations['DeleteSavedFilter']['responses']['200']['content']['application/json'];
export declare type ListSavedFiltersInput = operations['ListSavedFilters']['requestBody']['content']['application/json'];
export declare type ListSavedFiltersOutput = operations['ListSavedFilters']['responses']['200']['content']['application/json'];
export declare type UpdateSavedFilterInput = operations['UpdateSavedFilter']['requestBody']['content']['application/json'];
export declare type UpdateSavedFilterOutput = operations['UpdateSavedFilter']['responses']['200']['content']['application/json'];
export declare type GetSavedFilterInput = {};
export declare type GetSavedFilterOutput = operations['GetSavedFilter']['responses']['200']['content']['application/json'];
export declare type CreateSavedFilterInput = operations['CreateSavedFilter']['requestBody']['content']['application/json'];
export declare type CreateSavedFilterOutput = operations['CreateSavedFilter']['responses']['200']['content']['application/json'];
export declare type DeleteComponentInput = operations['DeleteComponent']['requestBody']['content']['application/json'];
export declare type DeleteComponentOutput = operations['DeleteComponent']['responses']['200']['content']['application/json'];
export declare type ListComponentsInput = operations['ListComponents']['requestBody']['content']['application/json'];
export declare type ListComponentsOutput = operations['ListComponents']['responses']['200']['content']['application/json'];
export declare type UpdateComponentInput = operations['UpdateComponent']['requestBody']['content']['application/json'];
export declare type UpdateComponentOutput = operations['UpdateComponent']['responses']['200']['content']['application/json'];
export declare type GetComponentInput = {};
export declare type GetComponentOutput = operations['GetComponent']['responses']['200']['content']['application/json'];
export declare type CreateComponentInput = operations['CreateComponent']['requestBody']['content']['application/json'];
export declare type CreateComponentOutput = operations['CreateComponent']['responses']['200']['content']['application/json'];
export declare type ListDatasetEditorHistorysInput = operations['ListDatasetEditorHistorys']['requestBody']['content']['application/json'];
export declare type ListDatasetEditorHistorysOutput = operations['ListDatasetEditorHistorys']['responses']['200']['content']['application/json'];
export declare type CreateDatasetEditorHistoryInput = operations['CreateDatasetEditorHistory']['requestBody']['content']['application/json'];
export declare type CreateDatasetEditorHistoryOutput = operations['CreateDatasetEditorHistory']['responses']['200']['content']['application/json'];
export declare type ListEditorConfigurationsInput = operations['ListEditorConfigurations']['requestBody']['content']['application/json'];
export declare type ListEditorConfigurationsOutput = operations['ListEditorConfigurations']['responses']['200']['content']['application/json'];
export declare type CreateEditorConfigurationInput = operations['CreateEditorConfiguration']['requestBody']['content']['application/json'];
export declare type CreateEditorConfigurationOutput = operations['CreateEditorConfiguration']['responses']['200']['content']['application/json'];
export declare type UpdateEditorConfigurationInput = operations['UpdateEditorConfiguration']['requestBody']['content']['application/json'];
export declare type UpdateEditorConfigurationOutput = operations['UpdateEditorConfiguration']['responses']['200']['content']['application/json'];
export declare type DeleteEditorConfigurationInput = operations['DeleteEditorConfiguration']['requestBody']['content']['application/json'];
export declare type DeleteEditorConfigurationOutput = operations['DeleteEditorConfiguration']['responses']['200']['content']['application/json'];
export declare type GetEditorConfigurationInput = {};
export declare type GetEditorConfigurationOutput = operations['GetEditorConfiguration']['responses']['200']['content']['application/json'];
export declare type ListKeyphrasesInput = operations['ListKeyphrases']['requestBody']['content']['application/json'];
export declare type ListKeyphrasesOutput = operations['ListKeyphrases']['responses']['200']['content']['application/json'];
export declare type UpdateKeyphraseInput = operations['UpdateKeyphrase']['requestBody']['content']['application/json'];
export declare type UpdateKeyphraseOutput = operations['UpdateKeyphrase']['responses']['200']['content']['application/json'];
export declare type DeleteKeyphraseInput = operations['DeleteKeyphrase']['requestBody']['content']['application/json'];
export declare type DeleteKeyphraseOutput = operations['DeleteKeyphrase']['responses']['200']['content']['application/json'];
export declare type GetKeyphraseInput = {};
export declare type GetKeyphraseOutput = operations['GetKeyphrase']['responses']['200']['content']['application/json'];
export declare type BulkUpdateKeyphrasesInput = operations['BulkUpdateKeyphrases']['requestBody']['content']['application/json'];
export declare type BulkUpdateKeyphrasesOutput = operations['BulkUpdateKeyphrases']['responses']['200']['content']['application/json'];
export declare type BulkDeleteKeyphrasesInput = operations['BulkDeleteKeyphrases']['requestBody']['content']['application/json'];
export declare type BulkDeleteKeyphrasesOutput = operations['BulkDeleteKeyphrases']['responses']['200']['content']['application/json'];
export declare type ListTaxonomysInput = operations['ListTaxonomys']['requestBody']['content']['application/json'];
export declare type ListTaxonomysOutput = operations['ListTaxonomys']['responses']['200']['content']['application/json'];
export declare type UpdateTaxonomyInput = operations['UpdateTaxonomy']['requestBody']['content']['application/json'];
export declare type UpdateTaxonomyOutput = operations['UpdateTaxonomy']['responses']['200']['content']['application/json'];
export declare type DeleteTaxonomyInput = operations['DeleteTaxonomy']['requestBody']['content']['application/json'];
export declare type DeleteTaxonomyOutput = operations['DeleteTaxonomy']['responses']['200']['content']['application/json'];
export declare type GetTaxonomyInput = {};
export declare type GetTaxonomyOutput = operations['GetTaxonomy']['responses']['200']['content']['application/json'];
export declare type CreateTaxonomyInput = operations['CreateTaxonomy']['requestBody']['content']['application/json'];
export declare type CreateTaxonomyOutput = operations['CreateTaxonomy']['responses']['200']['content']['application/json'];
export declare type DeleteFavouriteDatasetInput = operations['DeleteFavouriteDataset']['requestBody']['content']['application/json'];
export declare type DeleteFavouriteDatasetOutput = operations['DeleteFavouriteDataset']['responses']['200']['content']['application/json'];
export declare type ListFavouriteDatasetsInput = operations['ListFavouriteDatasets']['requestBody']['content']['application/json'];
export declare type ListFavouriteDatasetsOutput = operations['ListFavouriteDatasets']['responses']['200']['content']['application/json'];
export declare type UpdateFavouriteDatasetInput = operations['UpdateFavouriteDataset']['requestBody']['content']['application/json'];
export declare type UpdateFavouriteDatasetOutput = operations['UpdateFavouriteDataset']['responses']['200']['content']['application/json'];
export declare type DeleteFavouriteDeployableInput = operations['DeleteFavouriteDeployable']['requestBody']['content']['application/json'];
export declare type DeleteFavouriteDeployableOutput = operations['DeleteFavouriteDeployable']['responses']['200']['content']['application/json'];
export declare type ListFavouriteDeployablesInput = operations['ListFavouriteDeployables']['requestBody']['content']['application/json'];
export declare type ListFavouriteDeployablesOutput = operations['ListFavouriteDeployables']['responses']['200']['content']['application/json'];
export declare type UpdateFavouriteDeployableInput = operations['UpdateFavouriteDeployable']['requestBody']['content']['application/json'];
export declare type UpdateFavouriteDeployableOutput = operations['UpdateFavouriteDeployable']['responses']['200']['content']['application/json'];
export declare type DeleteUserOnboardingFlagInput = operations['DeleteUserOnboardingFlag']['requestBody']['content']['application/json'];
export declare type DeleteUserOnboardingFlagOutput = operations['DeleteUserOnboardingFlag']['responses']['200']['content']['application/json'];
export declare type ListUserOnboardingFlagsInput = operations['ListUserOnboardingFlags']['requestBody']['content']['application/json'];
export declare type ListUserOnboardingFlagsOutput = operations['ListUserOnboardingFlags']['responses']['200']['content']['application/json'];
export declare type UpdateUserOnboardingFlagInput = operations['UpdateUserOnboardingFlag']['requestBody']['content']['application/json'];
export declare type UpdateUserOnboardingFlagOutput = operations['UpdateUserOnboardingFlag']['responses']['200']['content']['application/json'];
export declare type GetTranscriptTagListInput = {};
export declare type GetTranscriptTagListOutput = operations['GetTranscriptTagList']['responses']['200']['content']['application/json'];
export declare type UpdateTranscriptTagListInput = operations['UpdateTranscriptTagList']['requestBody']['content']['application/json'];
export declare type UpdateTranscriptTagListOutput = operations['UpdateTranscriptTagList']['responses']['200']['content']['application/json'];
export declare type ListTranscriptTagListsInput = operations['ListTranscriptTagLists']['requestBody']['content']['application/json'];
export declare type ListTranscriptTagListsOutput = operations['ListTranscriptTagLists']['responses']['200']['content']['application/json'];
export declare type ListTagsInput = operations['ListTags']['requestBody']['content']['application/json'];
export declare type ListTagsOutput = operations['ListTags']['responses']['200']['content']['application/json'];
export declare type DeleteTagInput = operations['DeleteTag']['requestBody']['content']['application/json'];
export declare type DeleteTagOutput = operations['DeleteTag']['responses']['200']['content']['application/json'];
export declare type GetTagInput = {};
export declare type GetTagOutput = operations['GetTag']['responses']['200']['content']['application/json'];
export declare type BulkDeleteTagsInput = operations['BulkDeleteTags']['requestBody']['content']['application/json'];
export declare type BulkDeleteTagsOutput = operations['BulkDeleteTags']['responses']['200']['content']['application/json'];
export declare type BulkUpdateTagsInput = operations['BulkUpdateTags']['requestBody']['content']['application/json'];
export declare type BulkUpdateTagsOutput = operations['BulkUpdateTags']['responses']['200']['content']['application/json'];
export declare class VecDBApiClient extends _GenericClient {
    constructor(config: _ClientInput);
    CreateDeployable(input: CommandInput<CreateDeployableInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDeployableOutput>>;
    GetDeployable(input: CommandInput<GetDeployableInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetDeployableOutput>>;
    UpdateDeployable(input: CommandInput<UpdateDeployableInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateDeployableOutput>>;
    DeleteDeployable(input: CommandInput<DeleteDeployableInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteDeployableOutput>>;
    CreateDeployableKey(input: CommandInput<CreateDeployableKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDeployableKeyOutput>>;
    CreateDeployableInvite(input: CommandInput<CreateDeployableInviteInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDeployableInviteOutput>>;
    UpdateUsersDeployablePermissions(input: CommandInput<UpdateUsersDeployablePermissionsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateUsersDeployablePermissionsOutput>>;
    DeleteDeployableKey(input: CommandInput<DeleteDeployableKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteDeployableKeyOutput>>;
    ListDeployables(input: CommandInput<ListDeployablesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListDeployablesOutput>>;
    DeleteDeployableGroup(input: CommandInput<DeleteDeployableGroupInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteDeployableGroupOutput>>;
    ListDeployableGroups(input: CommandInput<ListDeployableGroupsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListDeployableGroupsOutput>>;
    CreateDeployableGroup(input: CommandInput<CreateDeployableGroupInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDeployableGroupOutput>>;
    GetDeployableGroup(input: CommandInput<GetDeployableGroupInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetDeployableGroupOutput>>;
    UpdateDeployableGroup(input: CommandInput<UpdateDeployableGroupInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateDeployableGroupOutput>>;
    CreateDeployableGroupKey(input: CommandInput<CreateDeployableGroupKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDeployableGroupKeyOutput>>;
    DeleteDeployableGroupKey(input: CommandInput<DeleteDeployableGroupKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteDeployableGroupKeyOutput>>;
    CreateProject(input: CommandInput<CreateProjectInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateProjectOutput>>;
    UpdateProject(input: CommandInput<UpdateProjectInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateProjectOutput>>;
    TransferProjectToOrganization(input: CommandInput<TransferProjectToOrganizationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<TransferProjectToOrganizationOutput>>;
    ListProjects(input: CommandInput<ListProjectsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListProjectsOutput>>;
    GetProjectsOrgInfo(input: CommandInput<GetProjectsOrgInfoInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetProjectsOrgInfoOutput>>;
    ListProjectKeys(input: CommandInput<ListProjectKeysInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListProjectKeysOutput>>;
    GetProjectKey(input: CommandInput<GetProjectKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetProjectKeyOutput>>;
    SetProjectKey(input: CommandInput<SetProjectKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<SetProjectKeyOutput>>;
    DeleteProjectKey(input: CommandInput<DeleteProjectKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteProjectKeyOutput>>;
    CreateUser(input: CommandInput<CreateUserInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateUserOutput>>;
    ListUsers(input: CommandInput<ListUsersInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListUsersOutput>>;
    IsUserAuthorized(input: CommandInput<IsUserAuthorizedInput>, options?: _GenericMethodOptions): Promise<CommandOutput<IsUserAuthorizedOutput>>;
    GetAuthHeaderInfo(input: CommandInput<GetAuthHeaderInfoInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetAuthHeaderInfoOutput>>;
    CreateProjectInvite(input: CommandInput<CreateProjectInviteInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateProjectInviteOutput>>;
    ListProjectInvites(input: CommandInput<ListProjectInvitesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListProjectInvitesOutput>>;
    AcceptProjectInvite(input: CommandInput<AcceptProjectInviteInput>, options?: _GenericMethodOptions): Promise<CommandOutput<AcceptProjectInviteOutput>>;
    DeleteProjectInvite(input: CommandInput<DeleteProjectInviteInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteProjectInviteOutput>>;
    ResendProjectInvite(input: CommandInput<ResendProjectInviteInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ResendProjectInviteOutput>>;
    GetUser(input: CommandInput<GetUserInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetUserOutput>>;
    UpdateUser(input: CommandInput<UpdateUserInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateUserOutput>>;
    DeleteUser(input: CommandInput<DeleteUserInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteUserOutput>>;
    CreateUserKey(input: CommandInput<CreateUserKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateUserKeyOutput>>;
    ListUserKeys(input: CommandInput<ListUserKeysInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListUserKeysOutput>>;
    DeleteUserKey(input: CommandInput<DeleteUserKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteUserKeyOutput>>;
    InsertClusterCentroids(input: CommandInput<InsertClusterCentroidsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<InsertClusterCentroidsOutput>>;
    UpdateClusterCentroids(input: CommandInput<UpdateClusterCentroidsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateClusterCentroidsOutput>>;
    CompareClusterCentroids(input: CommandInput<CompareClusterCentroidsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CompareClusterCentroidsOutput>>;
    Aggregate(input: CommandInput<AggregateInput>, options?: _GenericMethodOptions): Promise<CommandOutput<AggregateOutput>>;
    AggregateClusters(input: CommandInput<AggregateClustersInput>, options?: _GenericMethodOptions): Promise<CommandOutput<AggregateClustersOutput>>;
    ListClusterFacets(input: CommandInput<ListClusterFacetsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListClusterFacetsOutput>>;
    ListClosestToCentroids(input: CommandInput<ListClosestToCentroidsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListClosestToCentroidsOutput>>;
    ListFurthestFromCentroids(input: CommandInput<ListFurthestFromCentroidsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListFurthestFromCentroidsOutput>>;
    ListCentroids(input: CommandInput<ListCentroidsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListCentroidsOutput>>;
    ListCentroidConfigs(input: CommandInput<ListCentroidConfigsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListCentroidConfigsOutput>>;
    DeleteCentroid(input: CommandInput<DeleteCentroidInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteCentroidOutput>>;
    RealtimeClustering(input: CommandInput<RealtimeClusteringInput>, options?: _GenericMethodOptions): Promise<CommandOutput<RealtimeClusteringOutput>>;
    MergeClusters(input: CommandInput<MergeClustersInput>, options?: _GenericMethodOptions): Promise<CommandOutput<MergeClustersOutput>>;
    CreateClusterSummaries(input: CommandInput<CreateClusterSummariesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateClusterSummariesOutput>>;
    CreateClusterLabels(input: CommandInput<CreateClusterLabelsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateClusterLabelsOutput>>;
    ListClusterSummaries(input: CommandInput<ListClusterSummariesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListClusterSummariesOutput>>;
    CreateHierarchicalClusters(input: CommandInput<CreateHierarchicalClustersInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateHierarchicalClustersOutput>>;
    DeleteClusterSummaries(input: CommandInput<DeleteClusterSummariesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteClusterSummariesOutput>>;
    EditOneToManyClusters(input: CommandInput<EditOneToManyClustersInput>, options?: _GenericMethodOptions): Promise<CommandOutput<EditOneToManyClustersOutput>>;
    EditListInDocuments(input: CommandInput<EditListInDocumentsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<EditListInDocumentsOutput>>;
    CreateOrganization(input: CommandInput<CreateOrganizationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateOrganizationOutput>>;
    UpdateOrganization(input: CommandInput<UpdateOrganizationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateOrganizationOutput>>;
    UpdateOrganizationAdmin(input: CommandInput<UpdateOrganizationAdminInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateOrganizationAdminOutput>>;
    ListOrganizations(input: CommandInput<ListOrganizationsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListOrganizationsOutput>>;
    DeleteOrganization(input: CommandInput<DeleteOrganizationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteOrganizationOutput>>;
    GetOrganization(input: CommandInput<GetOrganizationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetOrganizationOutput>>;
    GetOrganizationUsage(input: CommandInput<GetOrganizationUsageInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetOrganizationUsageOutput>>;
    ListUsersInOrganization(input: CommandInput<ListUsersInOrganizationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListUsersInOrganizationOutput>>;
    ListProjectsInOrganization(input: CommandInput<ListProjectsInOrganizationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListProjectsInOrganizationOutput>>;
    AggregateOrganizationMetrics(input: CommandInput<AggregateOrganizationMetricsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<AggregateOrganizationMetricsOutput>>;
    ListBillingEvents(input: CommandInput<ListBillingEventsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListBillingEventsOutput>>;
    CreateBillingEventAdmin(input: CommandInput<CreateBillingEventAdminInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateBillingEventAdminOutput>>;
    GetBillingFrontendLink(input: CommandInput<GetBillingFrontendLinkInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetBillingFrontendLinkOutput>>;
    UpdateOrganizationBilling(input: CommandInput<UpdateOrganizationBillingInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateOrganizationBillingOutput>>;
    CreateConnector(input: CommandInput<CreateConnectorInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateConnectorOutput>>;
    CheckConnection(input: CommandInput<CheckConnectionInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CheckConnectionOutput>>;
    GetConnector(input: CommandInput<GetConnectorInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetConnectorOutput>>;
    UpdateConnector(input: CommandInput<UpdateConnectorInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateConnectorOutput>>;
    TriggerConnector(input: CommandInput<TriggerConnectorInput>, options?: _GenericMethodOptions): Promise<CommandOutput<TriggerConnectorOutput>>;
    DeleteConnector(input: CommandInput<DeleteConnectorInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteConnectorOutput>>;
    ListConnectors(input: CommandInput<ListConnectorsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListConnectorsOutput>>;
    ListConnectorTypes(input: CommandInput<ListConnectorTypesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListConnectorTypesOutput>>;
    GetConnectorType(input: CommandInput<GetConnectorTypeInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetConnectorTypeOutput>>;
    ListConnectorJobs(input: CommandInput<ListConnectorJobsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListConnectorJobsOutput>>;
    GetConnectorJob(input: CommandInput<GetConnectorJobInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetConnectorJobOutput>>;
    TriggerWorkflow(input: CommandInput<TriggerWorkflowInput>, options?: _GenericMethodOptions): Promise<CommandOutput<TriggerWorkflowOutput>>;
    ListWorkflows(input: CommandInput<ListWorkflowsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListWorkflowsOutput>>;
    GetWorkflowStatus(input: CommandInput<GetWorkflowStatusInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetWorkflowStatusOutput>>;
    GetWorkflowConfig(input: CommandInput<GetWorkflowConfigInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetWorkflowConfigOutput>>;
    DeleteWorkflowStatus(input: CommandInput<DeleteWorkflowStatusInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteWorkflowStatusOutput>>;
    TerminateWorkflow(input: CommandInput<TerminateWorkflowInput>, options?: _GenericMethodOptions): Promise<CommandOutput<TerminateWorkflowOutput>>;
    UpsertWorkflowMetadata(input: CommandInput<UpsertWorkflowMetadataInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpsertWorkflowMetadataOutput>>;
    UpsertWorkflowProgress(input: CommandInput<UpsertWorkflowProgressInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpsertWorkflowProgressOutput>>;
    UpsertWorkflowStatus(input: CommandInput<UpsertWorkflowStatusInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpsertWorkflowStatusOutput>>;
    ListWorkflowTypes(input: CommandInput<ListWorkflowTypesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListWorkflowTypesOutput>>;
    SearchWorkflowTypes(input: CommandInput<SearchWorkflowTypesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<SearchWorkflowTypesOutput>>;
    GetWorkflowTypesAsOpenAPI(input: CommandInput<GetWorkflowTypesAsOpenAPIInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetWorkflowTypesAsOpenAPIOutput>>;
    AggregateWorkflowTypes(input: CommandInput<AggregateWorkflowTypesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<AggregateWorkflowTypesOutput>>;
    BulkUpdateWorkflowTypesAdmin(input: CommandInput<BulkUpdateWorkflowTypesAdminInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkUpdateWorkflowTypesAdminOutput>>;
    UpdateWorkflowTypesVersionAliasesAdmin(input: CommandInput<UpdateWorkflowTypesVersionAliasesAdminInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateWorkflowTypesVersionAliasesAdminOutput>>;
    GetWorkflowTypesVersionAliases(input: CommandInput<GetWorkflowTypesVersionAliasesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetWorkflowTypesVersionAliasesOutput>>;
    GetWorkflowType(input: CommandInput<GetWorkflowTypeInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetWorkflowTypeOutput>>;
    ValidateWorkflowParams(input: CommandInput<ValidateWorkflowParamsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ValidateWorkflowParamsOutput>>;
    Insert(input: CommandInput<InsertInput>, options?: _GenericMethodOptions): Promise<CommandOutput<InsertOutput>>;
    BulkInsert(input: CommandInput<BulkInsertInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkInsertOutput>>;
    GetFileUploadUrlsForDataset(input: CommandInput<GetFileUploadUrlsForDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetFileUploadUrlsForDatasetOutput>>;
    GetTemporaryFileUploadUrl(input: CommandInput<GetTemporaryFileUploadUrlInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetTemporaryFileUploadUrlOutput>>;
    ListFileUploadsForDataset(input: CommandInput<ListFileUploadsForDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListFileUploadsForDatasetOutput>>;
    ParseBlob(input: CommandInput<ParseBlobInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ParseBlobOutput>>;
    CopyForeignDataset(input: CommandInput<CopyForeignDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CopyForeignDatasetOutput>>;
    CreateProjectReadKey(input: CommandInput<CreateProjectReadKeyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateProjectReadKeyOutput>>;
    GenerateOnboarding(input: CommandInput<GenerateOnboardingInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GenerateOnboardingOutput>>;
    DeleteDataset(input: CommandInput<DeleteDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteDatasetOutput>>;
    CreateDataset(input: CommandInput<CreateDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDatasetOutput>>;
    GetSchema(input: CommandInput<GetSchemaInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetSchemaOutput>>;
    ListDatasets(input: CommandInput<ListDatasetsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListDatasetsOutput>>;
    CombineDatasets(input: CommandInput<CombineDatasetsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CombineDatasetsOutput>>;
    GetCombineJobStatus(input: CommandInput<GetCombineJobStatusInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetCombineJobStatusOutput>>;
    SearchDatasets(input: CommandInput<SearchDatasetsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<SearchDatasetsOutput>>;
    GetFieldHealth(input: CommandInput<GetFieldHealthInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetFieldHealthOutput>>;
    GetDatasetStats(input: CommandInput<GetDatasetStatsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetDatasetStatsOutput>>;
    GetVectorMappings(input: CommandInput<GetVectorMappingsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetVectorMappingsOutput>>;
    GetDatasetDetails(input: CommandInput<GetDatasetDetailsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetDatasetDetailsOutput>>;
    GetDocument(input: CommandInput<GetDocumentInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetDocumentOutput>>;
    DeleteDocument(input: CommandInput<DeleteDocumentInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteDocumentOutput>>;
    UpsertDatasetSettings(input: CommandInput<UpsertDatasetSettingsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpsertDatasetSettingsOutput>>;
    GetDatasetSettings(input: CommandInput<GetDatasetSettingsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetDatasetSettingsOutput>>;
    UpsertDatasetMetadata(input: CommandInput<UpsertDatasetMetadataInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpsertDatasetMetadataOutput>>;
    GetDatasetMetadata(input: CommandInput<GetDatasetMetadataInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetDatasetMetadataOutput>>;
    Update(input: CommandInput<UpdateInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateOutput>>;
    DeleteDocumentFields(input: CommandInput<DeleteDocumentFieldsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteDocumentFieldsOutput>>;
    BulkUpdate(input: CommandInput<BulkUpdateInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkUpdateOutput>>;
    UpdateWhere(input: CommandInput<UpdateWhereInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateWhereOutput>>;
    AppendTags(input: CommandInput<AppendTagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<AppendTagsOutput>>;
    DeleteTags(input: CommandInput<DeleteTagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteTagsOutput>>;
    MergeTags(input: CommandInput<MergeTagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<MergeTagsOutput>>;
    EditTags(input: CommandInput<EditTagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<EditTagsOutput>>;
    ListFacets(input: CommandInput<ListFacetsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListFacetsOutput>>;
    GetWhere(input: CommandInput<GetWhereInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetWhereOutput>>;
    PaginateDocuments(input: CommandInput<PaginateDocumentsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<PaginateDocumentsOutput>>;
    CreateDatasetSummary(input: CommandInput<CreateDatasetSummaryInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDatasetSummaryOutput>>;
    ListDatasetSummaryHistory(input: CommandInput<ListDatasetSummaryHistoryInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListDatasetSummaryHistoryOutput>>;
    BulkGetDocuments(input: CommandInput<BulkGetDocumentsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkGetDocumentsOutput>>;
    BulkDeleteDocuments(input: CommandInput<BulkDeleteDocumentsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkDeleteDocumentsOutput>>;
    ListDocuments(input: CommandInput<ListDocumentsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListDocumentsOutput>>;
    DeleteWhere(input: CommandInput<DeleteWhereInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteWhereOutput>>;
    SimpleSearchPost(input: CommandInput<SimpleSearchPostInput>, options?: _GenericMethodOptions): Promise<CommandOutput<SimpleSearchPostOutput>>;
    Search(input: CommandInput<SearchInput>, options?: _GenericMethodOptions): Promise<CommandOutput<SearchOutput>>;
    Recommend(input: CommandInput<RecommendInput>, options?: _GenericMethodOptions): Promise<CommandOutput<RecommendOutput>>;
    CloneDataset(input: CommandInput<CloneDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CloneDatasetOutput>>;
    PredictKNNRegression(input: CommandInput<PredictKNNRegressionInput>, options?: _GenericMethodOptions): Promise<CommandOutput<PredictKNNRegressionOutput>>;
    PredictKNNFromResults(input: CommandInput<PredictKNNFromResultsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<PredictKNNFromResultsOutput>>;
    BiasEvaluation(input: CommandInput<BiasEvaluationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BiasEvaluationOutput>>;
    Vectorize(input: CommandInput<VectorizeInput>, options?: _GenericMethodOptions): Promise<CommandOutput<VectorizeOutput>>;
    VectorizeAndInsert(input: CommandInput<VectorizeAndInsertInput>, options?: _GenericMethodOptions): Promise<CommandOutput<VectorizeAndInsertOutput>>;
    VectorizeField(input: CommandInput<VectorizeFieldInput>, options?: _GenericMethodOptions): Promise<CommandOutput<VectorizeFieldOutput>>;
    ListDatasetWorkflowsByFields(input: CommandInput<ListDatasetWorkflowsByFieldsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListDatasetWorkflowsByFieldsOutput>>;
    GetAPIHealth(input: CommandInput<GetAPIHealthInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetAPIHealthOutput>>;
    DeleteFieldChildren(input: CommandInput<DeleteFieldChildrenInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteFieldChildrenOutput>>;
    ListFieldChildrens(input: CommandInput<ListFieldChildrensInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListFieldChildrensOutput>>;
    UpdateFieldChildren(input: CommandInput<UpdateFieldChildrenInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateFieldChildrenOutput>>;
    DeleteFavouriteWorkflow(input: CommandInput<DeleteFavouriteWorkflowInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteFavouriteWorkflowOutput>>;
    ListFavouriteWorkflows(input: CommandInput<ListFavouriteWorkflowsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListFavouriteWorkflowsOutput>>;
    UpdateFavouriteWorkflow(input: CommandInput<UpdateFavouriteWorkflowInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateFavouriteWorkflowOutput>>;
    DeleteSavedFilter(input: CommandInput<DeleteSavedFilterInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteSavedFilterOutput>>;
    ListSavedFilters(input: CommandInput<ListSavedFiltersInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListSavedFiltersOutput>>;
    UpdateSavedFilter(input: CommandInput<UpdateSavedFilterInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateSavedFilterOutput>>;
    GetSavedFilter(input: CommandInput<GetSavedFilterInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetSavedFilterOutput>>;
    CreateSavedFilter(input: CommandInput<CreateSavedFilterInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateSavedFilterOutput>>;
    DeleteComponent(input: CommandInput<DeleteComponentInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteComponentOutput>>;
    ListComponents(input: CommandInput<ListComponentsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListComponentsOutput>>;
    UpdateComponent(input: CommandInput<UpdateComponentInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateComponentOutput>>;
    GetComponent(input: CommandInput<GetComponentInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetComponentOutput>>;
    CreateComponent(input: CommandInput<CreateComponentInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateComponentOutput>>;
    ListDatasetEditorHistorys(input: CommandInput<ListDatasetEditorHistorysInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListDatasetEditorHistorysOutput>>;
    CreateDatasetEditorHistory(input: CommandInput<CreateDatasetEditorHistoryInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateDatasetEditorHistoryOutput>>;
    ListEditorConfigurations(input: CommandInput<ListEditorConfigurationsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListEditorConfigurationsOutput>>;
    CreateEditorConfiguration(input: CommandInput<CreateEditorConfigurationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateEditorConfigurationOutput>>;
    UpdateEditorConfiguration(input: CommandInput<UpdateEditorConfigurationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateEditorConfigurationOutput>>;
    DeleteEditorConfiguration(input: CommandInput<DeleteEditorConfigurationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteEditorConfigurationOutput>>;
    GetEditorConfiguration(input: CommandInput<GetEditorConfigurationInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetEditorConfigurationOutput>>;
    ListKeyphrases(input: CommandInput<ListKeyphrasesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListKeyphrasesOutput>>;
    UpdateKeyphrase(input: CommandInput<UpdateKeyphraseInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateKeyphraseOutput>>;
    DeleteKeyphrase(input: CommandInput<DeleteKeyphraseInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteKeyphraseOutput>>;
    GetKeyphrase(input: CommandInput<GetKeyphraseInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetKeyphraseOutput>>;
    BulkUpdateKeyphrases(input: CommandInput<BulkUpdateKeyphrasesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkUpdateKeyphrasesOutput>>;
    BulkDeleteKeyphrases(input: CommandInput<BulkDeleteKeyphrasesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkDeleteKeyphrasesOutput>>;
    ListTaxonomys(input: CommandInput<ListTaxonomysInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListTaxonomysOutput>>;
    UpdateTaxonomy(input: CommandInput<UpdateTaxonomyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateTaxonomyOutput>>;
    DeleteTaxonomy(input: CommandInput<DeleteTaxonomyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteTaxonomyOutput>>;
    GetTaxonomy(input: CommandInput<GetTaxonomyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetTaxonomyOutput>>;
    CreateTaxonomy(input: CommandInput<CreateTaxonomyInput>, options?: _GenericMethodOptions): Promise<CommandOutput<CreateTaxonomyOutput>>;
    DeleteFavouriteDataset(input: CommandInput<DeleteFavouriteDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteFavouriteDatasetOutput>>;
    ListFavouriteDatasets(input: CommandInput<ListFavouriteDatasetsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListFavouriteDatasetsOutput>>;
    UpdateFavouriteDataset(input: CommandInput<UpdateFavouriteDatasetInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateFavouriteDatasetOutput>>;
    DeleteFavouriteDeployable(input: CommandInput<DeleteFavouriteDeployableInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteFavouriteDeployableOutput>>;
    ListFavouriteDeployables(input: CommandInput<ListFavouriteDeployablesInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListFavouriteDeployablesOutput>>;
    UpdateFavouriteDeployable(input: CommandInput<UpdateFavouriteDeployableInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateFavouriteDeployableOutput>>;
    DeleteUserOnboardingFlag(input: CommandInput<DeleteUserOnboardingFlagInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteUserOnboardingFlagOutput>>;
    ListUserOnboardingFlags(input: CommandInput<ListUserOnboardingFlagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListUserOnboardingFlagsOutput>>;
    UpdateUserOnboardingFlag(input: CommandInput<UpdateUserOnboardingFlagInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateUserOnboardingFlagOutput>>;
    GetTranscriptTagList(input: CommandInput<GetTranscriptTagListInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetTranscriptTagListOutput>>;
    UpdateTranscriptTagList(input: CommandInput<UpdateTranscriptTagListInput>, options?: _GenericMethodOptions): Promise<CommandOutput<UpdateTranscriptTagListOutput>>;
    ListTranscriptTagLists(input: CommandInput<ListTranscriptTagListsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListTranscriptTagListsOutput>>;
    ListTags(input: CommandInput<ListTagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<ListTagsOutput>>;
    DeleteTag(input: CommandInput<DeleteTagInput>, options?: _GenericMethodOptions): Promise<CommandOutput<DeleteTagOutput>>;
    GetTag(input: CommandInput<GetTagInput>, options?: _GenericMethodOptions): Promise<CommandOutput<GetTagOutput>>;
    BulkDeleteTags(input: CommandInput<BulkDeleteTagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkDeleteTagsOutput>>;
    BulkUpdateTags(input: CommandInput<BulkUpdateTagsInput>, options?: _GenericMethodOptions): Promise<CommandOutput<BulkUpdateTagsOutput>>;
}
