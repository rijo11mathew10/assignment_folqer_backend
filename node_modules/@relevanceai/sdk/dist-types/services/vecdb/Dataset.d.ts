/// <reference types="node" />
import { VecDBClient, _QueryBuilder } from ".";
import { DeleteDocumentOutput, DeleteWhereOutput, GetDocumentOutput, SimpleSearchPostOutput, BulkInsertOutput, UpdateWhereOutput, BulkUpdateOutput } from "../..";
import { _GenericMethodOptions } from "../../shared/BaseClient";
interface searchOptions {
    debounce?: number;
    rawPayload?: any;
}
export declare class Dataset {
    client: VecDBClient;
    name: string;
    config: any;
    debounceTimer?: NodeJS.Timeout;
    constructor(client: VecDBClient, name: string, options: any);
    get datasetName(): string;
    createIfNotExist(): Promise<boolean>;
    recreateIfExists(): Promise<boolean>;
    insertDocument(document: any, options?: _GenericMethodOptions): Promise<unknown>;
    search(): Promise<SimpleSearchPostOutput>;
    search(query?: _QueryBuilder): Promise<SimpleSearchPostOutput>;
    search(options?: searchOptions): Promise<SimpleSearchPostOutput>;
    search(query?: _QueryBuilder, options?: searchOptions): Promise<SimpleSearchPostOutput>;
    insertDocuments(documents: any, encoders?: any, options?: _GenericMethodOptions & {
        batchSize?: number;
        retryCount?: number;
        progressCallback?: (progress: BulkInsertOutput[]) => any;
    }): Promise<BulkInsertOutput>;
    _GenericBulkOperation<InputItem, OutputItem>({ data, batchSize, fn, retryCount }: {
        data: InputItem[];
        fn: (data: InputItem[]) => Promise<OutputItem>;
        batchSize?: number;
        retryCount?: number;
        progressCallback?: (progress: OutputItem[]) => any;
    }): Promise<OutputItem[]>;
    updateDocument(documentId: string, partialUpdates: any): Promise<{
        status: string;
        message: string;
    }>;
    updateDocuments(updates: any, options?: _GenericMethodOptions & {
        batchSize?: number;
        retryCount?: number;
        progressCallback?: (progress: BulkUpdateOutput[]) => any;
    }): Promise<BulkUpdateOutput>;
    updateDocumentsWhere(filters: _QueryBuilder, partialUpdates: {
        [id: string]: any;
    }): Promise<UpdateWhereOutput>;
    getDocument(documentId: string): Promise<GetDocumentOutput>;
    deleteDocument(documentId: string): Promise<DeleteDocumentOutput>;
    deleteDocuments(documentIds: [string]): Promise<DeleteWhereOutput>;
    deleteDocumentsWhere(filters: _QueryBuilder): Promise<DeleteWhereOutput>;
}
export {};
