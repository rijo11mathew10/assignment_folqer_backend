import { VecDBApiClient } from '../../';
import { _ClientInput } from '../../shared/BaseClient';
import { components } from '../../generated/_VecDBApiSchemaTypes';
import { Dataset } from './Dataset';
declare type bodyType = any;
export declare function QueryBuilder(): _QueryBuilder;
export declare function FilterBuilder(): _FilterBuilder;
export declare class _FilterBuilder {
    body: bodyType;
    constructor();
    buildFilters(): any;
    rawFilter(filter: components['schemas']['simpleSearchAndFlatFilterItem']): this;
    filter(type: string, key: string, value: string, ...options: any): this;
    match(field: string, value: any): this;
    wildcard(field: string, value: any): this;
    range(field: string, options: Omit<components['schemas']['simpleSearchAndFlatFilterItem']['range'], 'field'>): this;
    or(filters: _FilterBuilder[]): this;
}
export declare class _QueryBuilder extends _FilterBuilder {
    defaultQueryValue?: string;
    shouldPerformTextQuery: boolean;
    constructor();
    build(): any;
    vector(field: string, weight?: number): _QueryBuilder;
    vector(field: string, options?: any): _QueryBuilder;
    vector(field: string, weight?: number, options?: any): _QueryBuilder;
    sort(field: string, direction: 'asc' | 'desc'): this;
    rawOption(key: string, value: any): this;
    minimumRelevance(value: bodyType['minimumRelevance']): this;
    page(value: bodyType['page']): this;
    pageSize(value: bodyType['pageSize']): this;
    includeFields(fields: bodyType['includeFields']): this;
    ask(query: string, field: string, options: {
        preset?: any;
        titleReferenceField?: string;
        urlReferenceField?: string;
    }): this;
}
export declare class VecDBClient {
    apiClient: VecDBApiClient;
    constructor(config?: _ClientInput);
    dataset(name: string, options?: any): Dataset;
}
export {};
