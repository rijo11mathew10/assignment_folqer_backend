var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import fetch from 'cross-fetch';
import { promises as fs } from 'fs';
import openapiTS from 'openapi-typescript';
import { serviceConfigs } from './serviceConfigs';
// download schema using cross-fetch
// convert to sdk with typescript, can supply middleware methods that will be run ???
function GetFlattenedSchema(schema) {
    var e_1, _a, e_2, _b;
    var _c, _d, _e;
    if (!schema.paths)
        throw new Error('No paths in schema ${config.schema_url}');
    var final = [];
    try {
        for (var _f = __values(Object.entries(schema.paths)), _g = _f.next(); !_g.done; _g = _f.next()) {
            var _h = __read(_g.value, 2), path = _h[0], methods = _h[1];
            try {
                for (var _j = (e_2 = void 0, __values(Object.entries(methods))), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var _l = __read(_k.value, 2), method = _l[0], pathData = _l[1];
                    var operation = pathData; // object.entries didnt work here
                    var operationSummaryName = (_e = ((_d = (_c = operation === null || operation === void 0 ? void 0 : operation.operationId) !== null && _c !== void 0 ? _c : operation === null || operation === void 0 ? void 0 : operation.summary) !== null && _d !== void 0 ? _d : "".concat(path, "-").concat(method))) === null || _e === void 0 ? void 0 : _e.replace(/[^A-Za-z0-9]/g, "");
                    final.push({ path: path, method: method, operation: operation, operationSummaryName: operationSummaryName });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return final;
}
function GenerateSDKFromOpenAPISchema(_a) {
    var config = _a.config;
    return __awaiter(this, void 0, void 0, function () {
        var openapiSchema, typescriptOutput, _b, sdkText, pipeline, pipeline_1, pipeline_1_1, fn;
        var e_3, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, fetch(config.schema_url)];
                case 1: return [4 /*yield*/, (_d.sent()).json()];
                case 2:
                    openapiSchema = _d.sent();
                    _b = 'interface definitions {[id:string]:any};\n';
                    return [4 /*yield*/, openapiTS(openapiSchema)];
                case 3:
                    typescriptOutput = _b + (_d.sent());
                    sdkText = '';
                    pipeline = [
                        function () {
                            sdkText += "import {CommandInput,_GenericClient,CommandOutput,_ClientInput,_GenericMethodOptions} from '../shared/BaseClient';\n      import {operations} from './_".concat(config.name, "SchemaTypes';\n");
                        },
                        function () {
                            var e_4, _a;
                            try {
                                for (var _b = __values(GetFlattenedSchema(openapiSchema)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    var _d = _c.value, path = _d.path, method = _d.method, operation = _d.operation, operationSummaryName = _d.operationSummaryName;
                                    if (method.toLowerCase() !== 'get' && operation.requestBody) {
                                        sdkText += "\n  export type ".concat(operationSummaryName, "Input = operations['").concat(operation.operationId, "']['requestBody']['content']['application/json']");
                                    }
                                    else {
                                        sdkText += "\n  export type ".concat(operationSummaryName, "Input = {}");
                                    }
                                    sdkText += "\nexport type ".concat(operationSummaryName, "Output = operations['").concat(operation.operationId, "']['responses']['200']['content']['application/json']");
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                        },
                        function () {
                            sdkText += "\nexport class ".concat(config.name, "Client  extends _GenericClient {\n  constructor(config:_ClientInput){\n    super({...config,service_name:'").concat(config.name, "'});\n  }");
                        },
                        function () {
                            var e_5, _a;
                            try {
                                for (var _b = __values(GetFlattenedSchema(openapiSchema)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    var _d = _c.value, path = _d.path, method = _d.method, operationSummaryName = _d.operationSummaryName;
                                    sdkText += "\n  public async ".concat(operationSummaryName, "(\n    input: CommandInput<").concat(operationSummaryName, "Input>,\n    options?: _GenericMethodOptions\n  ):Promise<CommandOutput<").concat(operationSummaryName, "Output>> {\n    return this.SendRequest({\n      input,\n      method:'").concat(method, "',\n      path:'").concat(path, "',\n      options\n    });\n  }");
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                        },
                        function () {
                            sdkText += '}';
                        }
                    ];
                    try {
                        for (pipeline_1 = __values(pipeline), pipeline_1_1 = pipeline_1.next(); !pipeline_1_1.done; pipeline_1_1 = pipeline_1.next()) {
                            fn = pipeline_1_1.value;
                            fn();
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (pipeline_1_1 && !pipeline_1_1.done && (_c = pipeline_1.return)) _c.call(pipeline_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    return [4 /*yield*/, fs.writeFile("./src/generated/".concat(config.name, ".ts"), sdkText)];
                case 4:
                    _d.sent();
                    return [4 /*yield*/, fs.writeFile("./src/generated/_".concat(config.name, "SchemaTypes.ts"), typescriptOutput)];
                case 5:
                    _d.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function GenerateSDKS() {
    return __awaiter(this, void 0, void 0, function () {
        var indexFileContent, _a, _b, config;
        var e_6, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    indexFileContent = '';
                    try {
                        for (_a = __values(Object.values(serviceConfigs)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            config = _b.value;
                            GenerateSDKFromOpenAPISchema({ config: config });
                            indexFileContent += "export * from \"./".concat(config.name, "\";\n");
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    return [4 /*yield*/, fs.writeFile("./src/generated/index.ts", indexFileContent)];
                case 1:
                    _d.sent();
                    return [2 /*return*/];
            }
        });
    });
}
GenerateSDKS();
