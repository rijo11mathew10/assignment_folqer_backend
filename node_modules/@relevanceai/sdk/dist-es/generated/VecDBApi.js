var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { _GenericClient } from '../shared/BaseClient';
var VecDBApiClient = /** @class */ (function (_super) {
    __extends(VecDBApiClient, _super);
    function VecDBApiClient(config) {
        return _super.call(this, __assign(__assign({}, config), { service_name: 'VecDBApi' })) || this;
    }
    VecDBApiClient.prototype.CreateDeployable = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployables/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetDeployable = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/deployables/{deployable_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateDeployable = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployables/{deployable_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteDeployable = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployables/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateDeployableKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployables/{deployable_id}/share',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateDeployableInvite = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployables/{deployable_id}/invite',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateUsersDeployablePermissions = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployables/{deployable_id}/users/{user_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteDeployableKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployables/{deployable_id}/private',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListDeployables = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/deployables/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteDeployableGroup = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployablegroups/{deployablegroup_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListDeployableGroups = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployablegroups/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateDeployableGroup = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployablegroups/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetDeployableGroup = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/deployablegroups/{deployablegroup_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateDeployableGroup = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployablegroups/{deployablegroup_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateDeployableGroupKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployablegroups/{deployablegroup_id}/share',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteDeployableGroupKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployablegroups/{deployablegroup_id}/private',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateProject = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/projects/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateProject = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/projects/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.TransferProjectToOrganization = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/projects/transfer_to_organization',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListProjects = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/projects/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetProjectsOrgInfo = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/projects/organization_info',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListProjectKeys = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/projects/keys/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetProjectKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/projects/keys/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.SetProjectKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/projects/keys/set',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteProjectKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/projects/keys/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateUser = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/users/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListUsers = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/users/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.IsUserAuthorized = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/is_authorized',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetAuthHeaderInfo = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/auth/info',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateProjectInvite = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/invite/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListProjectInvites = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/invite/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.AcceptProjectInvite = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/invite/accept',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteProjectInvite = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/invite/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ResendProjectInvite = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/invite/resend',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetUser = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/auth/users/{user_id}',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateUser = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/users/{user_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteUser = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/users/{user_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateUserKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/users/{user_id}/keys/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListUserKeys = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/users/{user_id}/keys/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteUserKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/auth/users/{user_id}/keys/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.InsertClusterCentroids = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/insert',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateClusterCentroids = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CompareClusterCentroids = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/compare_centroids',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.Aggregate = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/aggregate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.AggregateClusters = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/aggregate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListClusterFacets = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/facets',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListClosestToCentroids = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/list_closest_to_center',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListFurthestFromCentroids = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/list_furthest_from_center',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListCentroids = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/documents',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListCentroidConfigs = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/cluster/centroids/configs/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteCentroid = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/{centroid_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.RealtimeClustering = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/realtime',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.MergeClusters = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/merge',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateClusterSummaries = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/summaries/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateClusterLabels = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/labels/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListClusterSummaries = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/summaries/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateHierarchicalClusters = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/hierarchical/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteClusterSummaries = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/centroids/summaries/bulk_delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.EditOneToManyClusters = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/cluster/one_to_many/edit',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.EditListInDocuments = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/edit_list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateOrganization = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/organizations/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateOrganization = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/organizations/{organization_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateOrganizationAdmin = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/admin/organizations/{organization_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListOrganizations = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/organizations/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteOrganization = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/organizations/{organization_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetOrganization = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/organizations/{organization_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetOrganizationUsage = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/organizations/{organization_id}/usage/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListUsersInOrganization = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/organizations/{organization_id}/users/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListProjectsInOrganization = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/organizations/{organization_id}/projects/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.AggregateOrganizationMetrics = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/organizations/{organization_id}/metrics/aggregate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListBillingEvents = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/organizations/{organization_id}/billing/events/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateBillingEventAdmin = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/admin/organizations/{organization_id}/billing/events/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetBillingFrontendLink = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/organizations/{organization_id}/billing/get_billing_frontend_link',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateOrganizationBilling = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/organizations/{organization_id}/billing/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateConnector = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/connectors/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CheckConnection = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/connectors/check_connection',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetConnector = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/connectors/{connector_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateConnector = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/connectors/{connector_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.TriggerConnector = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/connectors/{connector_id}/trigger',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteConnector = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/connectors/{connector_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListConnectors = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/connectors/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListConnectorTypes = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/connectors/types/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetConnectorType = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/connectors/types/{connector_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListConnectorJobs = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/connectors/{connector_id}/jobs/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetConnectorJob = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/connectors/{connector_id}/jobs/{job_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.TriggerWorkflow = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/trigger',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListWorkflows = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/workflows/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetWorkflowStatus = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/{workflow_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetWorkflowConfig = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/{workflow_id}/config',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteWorkflowStatus = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/{workflow_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.TerminateWorkflow = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/{workflow_id}/terminate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpsertWorkflowMetadata = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/{workflow_id}/metadata',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpsertWorkflowProgress = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/{workflow_id}/progress',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpsertWorkflowStatus = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/{workflow_id}/status',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListWorkflowTypes = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/workflows/types/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.SearchWorkflowTypes = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/types/search',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetWorkflowTypesAsOpenAPI = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/workflows/types/openapi',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.AggregateWorkflowTypes = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/types/aggregate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkUpdateWorkflowTypesAdmin = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/types/bulk_update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateWorkflowTypesVersionAliasesAdmin = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/types/version_aliases/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetWorkflowTypesVersionAliases = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/types/version_aliases/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetWorkflowType = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/workflows/types/{workflow_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ValidateWorkflowParams = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/types/{workflow_id}/validate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.Insert = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/insert',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkInsert = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/bulk_insert',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetFileUploadUrlsForDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/get_file_upload_urls',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetTemporaryFileUploadUrl = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/services/get_temporary_file_upload_url',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListFileUploadsForDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/list_file_uploads',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ParseBlob = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/parse_blob',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CopyForeignDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/admin/copy_foreign_dataset',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateProjectReadKey = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/admin/request_read_api_key',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GenerateOnboarding = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/onboard/generate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetSchema = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/schema',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListDatasets = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CombineDatasets = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/combine',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetCombineJobStatus = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/combine/{job_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.SearchDatasets = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/search',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetFieldHealth = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/monitor/health',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetDatasetStats = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/monitor/stats',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetVectorMappings = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/vector_mappings',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetDatasetDetails = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/details',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetDocument = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/documents/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteDocument = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpsertDatasetSettings = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/settings',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetDatasetSettings = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/settings',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpsertDatasetMetadata = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/metadata',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetDatasetMetadata = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/metadata',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.Update = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteDocumentFields = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/delete_fields',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkUpdate = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/bulk_update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateWhere = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/update_where',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.AppendTags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/tags/append',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteTags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/tags/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.MergeTags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/tags/merge',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.EditTags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/tags/edit',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListFacets = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/facets',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetWhere = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/get_where',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.PaginateDocuments = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/paginate',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateDatasetSummary = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/summaries/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListDatasetSummaryHistory = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/summaries/history/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkGetDocuments = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/bulk_get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkDeleteDocuments = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/bulk_delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListDocuments = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/documents/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteWhere = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/documents/delete_where',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.SimpleSearchPost = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/simple_search',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.Search = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/search',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.Recommend = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/recommend',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CloneDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/clone',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.PredictKNNRegression = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/services/prediction/regression/knn',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.PredictKNNFromResults = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/services/prediction/knn_from_results',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BiasEvaluation = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/services/evaluation/bias',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.Vectorize = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/services/vectorize',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.VectorizeAndInsert = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/services/vectorize/{dataset_id}/vectorize_and_insert',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.VectorizeField = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/services/vectorize/{dataset_id}',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListDatasetWorkflowsByFields = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/workflows_by_fields',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetAPIHealth = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/health',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteFieldChildren = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/field_children/{fieldchildren_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListFieldChildrens = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/field_children/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateFieldChildren = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/field_children/{fieldchildren_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteFavouriteWorkflow = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/favourites/{favouriteworkflow_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListFavouriteWorkflows = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/favourites/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateFavouriteWorkflow = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/workflows/favourites/{favouriteworkflow_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteSavedFilter = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/savedfilters/{savedfilter_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListSavedFilters = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/savedfilters/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateSavedFilter = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/savedfilters/{savedfilter_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetSavedFilter = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/savedfilters/{savedfilter_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateSavedFilter = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/savedfilters/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteComponent = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/components/{component_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListComponents = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/components/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateComponent = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/components/{component_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetComponent = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/components/{component_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateComponent = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/components/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListDatasetEditorHistorys = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/editor/history/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateDatasetEditorHistory = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/editor/history/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListEditorConfigurations = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/editor/configuration/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateEditorConfiguration = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/editor/configuration/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateEditorConfiguration = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/editor/configuration/{editorconfiguration_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteEditorConfiguration = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/editor/configuration/{editorconfiguration_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetEditorConfiguration = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/editor/configuration/{editorconfiguration_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListKeyphrases = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/fields/{field}/keyphrase/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateKeyphrase = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/fields/{field}/keyphrase/{keyphrase_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteKeyphrase = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/fields/{field}/keyphrase/{keyphrase_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetKeyphrase = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/fields/{field}/keyphrase/{keyphrase_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkUpdateKeyphrases = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/fields/{field}/keyphrase/bulk_update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkDeleteKeyphrases = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/fields/{field}/keyphrase/bulk_delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListTaxonomys = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/taxonomys/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateTaxonomy = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/taxonomys/{taxonomy_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteTaxonomy = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/taxonomys/{taxonomy_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetTaxonomy = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/taxonomys/{taxonomy_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.CreateTaxonomy = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/taxonomys/create',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteFavouriteDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/favourites/{favouritedataset_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListFavouriteDatasets = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/favourites/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateFavouriteDataset = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/favourites/{favouritedataset_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteFavouriteDeployable = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployable/favourites/{favouritedeployable_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListFavouriteDeployables = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployable/favourites/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateFavouriteDeployable = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/deployable/favourites/{favouritedeployable_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteUserOnboardingFlag = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/useronboardingflags/{useronboardingflag_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListUserOnboardingFlags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/useronboardingflags/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateUserOnboardingFlag = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/useronboardingflags/{useronboardingflag_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetTranscriptTagList = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/fields/{field}/transcript_tags/{transcripttaglist_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.UpdateTranscriptTagList = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/fields/{field}/transcript_tags/{transcripttaglist_id}/update',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListTranscriptTagLists = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/fields/{field}/transcript_tags/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.ListTags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/field/{tag_field}/tags/list',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.DeleteTag = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/field/{tag_field}/tags/{tag_id}/delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.GetTag = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'get',
                        path: '/datasets/{dataset_id}/field/{tag_field}/tags/{tag_id}/get',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkDeleteTags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/field/{tag_field}/tags/bulk_delete',
                        options: options
                    })];
            });
        });
    };
    VecDBApiClient.prototype.BulkUpdateTags = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.SendRequest({
                        input: input,
                        method: 'post',
                        path: '/datasets/{dataset_id}/field/{tag_field}/tags/bulk_update',
                        options: options
                    })];
            });
        });
    };
    return VecDBApiClient;
}(_GenericClient));
export { VecDBApiClient };
